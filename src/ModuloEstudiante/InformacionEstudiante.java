/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModuloEstudiante;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wilson Xicará
 */
public class InformacionEstudiante extends javax.swing.JFrame {
    private Connection conexion;
    private ResultSet consultaEstudiante = null;
    private DefaultTableModel tablaModel;
    /**
     * Creates new form VentanaEstudiante
     */
    public InformacionEstudiante() {
        initComponents();
        this.consultaEstudiante = null;
        tablaModel = new DefaultTableModel();
        // Definición de las columnas de 'tablaModel'
        tablaModel.addColumn("Id");
        tablaModel.addColumn("Código Personal");
        tablaModel.addColumn("CUI");
        tablaModel.addColumn("Nombre");
        tablaModel.addColumn("Dirección");
        tablaModel.addColumn("Fecha Nacimiento");
        tablaModel.addColumn("Sexo");
        tablaModel.addColumn("Etnia");
        tablaModel.addColumn("Capacidad Diferente");
        tablaModel.addColumn("Tipo Capacidad");
        tablaModel.addColumn("Encargado");
    }
    public InformacionEstudiante(Connection conexion) {
        initComponents();
        this.conexion = conexion;
        this.consultaEstudiante = null;
        tablaModel = new DefaultTableModel();
        // Definición de las columnas de 'tablaModel'
        tablaModel.addColumn("Id");
        tablaModel.addColumn("Código Personal");
        tablaModel.addColumn("CUI");
        tablaModel.addColumn("Nombre");
        tablaModel.addColumn("Dirección");
        tablaModel.addColumn("Fecha Nacimiento");
        tablaModel.addColumn("Sexo");
        tablaModel.addColumn("Etnia");
        tablaModel.addColumn("Capacidad Diferente");
        tablaModel.addColumn("Tipo Capacidad");
        tablaModel.addColumn("Encargado");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filtro_busqueda = new javax.swing.JComboBox<>();
        campo_busqueda = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        editar = new javax.swing.JButton();
        ver_notas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_encontrados = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Estudiante");

        jLabel1.setText("Buscar por:");

        filtro_busqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin especificar", "Apellidos", "Código Personal", "CUI" }));

        campo_busqueda.setText("jTextField1");

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        jLabel2.setText("Encontrado:");

        editar.setText("Editar Información");
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });

        ver_notas.setText("Ver Notas");
        ver_notas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ver_notasActionPerformed(evt);
            }
        });

        tabla_encontrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_encontrados);

        jLabel4.setText("jLabel4");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editar)
                            .addComponent(ver_notas)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filtro_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campo_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscar))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(filtro_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campo_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(editar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ver_notas)
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ver_notasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_notasActionPerformed
        int registroSeleccionado = tabla_encontrados.getSelectedRow();
        if (registroSeleccionado != -1) {
            try {
                consultaEstudiante.first();
                for(int i=0; i<registroSeleccionado; i++)
                    consultaEstudiante.next();
                Notas notas = new Notas(conexion, consultaEstudiante);
                notas.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(InformacionEstudiante.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ver_notasActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        /* Obtención del tipo de filtro para utilizar en la búsqueda */
        int filtro = 0; // Sin especificar
        if ("Apellidos".equals(filtro_busqueda.getSelectedItem().toString()) == true) filtro = 1;   // Búsqueda por Apellidos
        else if ("Código Personal".equals(filtro_busqueda.getSelectedItem().toString()) == true) filtro = 2;    // Búsqueda por Código Personal
        else if ("CUI".equals(filtro_busqueda.getSelectedItem().toString()) == true) filtro = 3;    // Búsqueda por CUI
        else filtro = 0;    // Sin Especificar
        String campo = campo_busqueda.getText();
        extraerDatos(filtro, campo);
        tabla_encontrados.setModel(tablaModel);
        tabla_encontrados.setVisible(true);
        
        tabla_encontrados.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabla_encontrados.getColumnModel().getColumn(0).setPreferredWidth(40);
        tabla_encontrados.getColumnModel().getColumn(1).setPreferredWidth(110);
        tabla_encontrados.getColumnModel().getColumn(2).setPreferredWidth(110);
        tabla_encontrados.getColumnModel().getColumn(3).setPreferredWidth(200);
        tabla_encontrados.getColumnModel().getColumn(4).setPreferredWidth(300);
        tabla_encontrados.getColumnModel().getColumn(5).setPreferredWidth(120);
        tabla_encontrados.getColumnModel().getColumn(6).setPreferredWidth(40);
        tabla_encontrados.getColumnModel().getColumn(7).setPreferredWidth(100);
        tabla_encontrados.getColumnModel().getColumn(8).setPreferredWidth(130);
        tabla_encontrados.getColumnModel().getColumn(9).setPreferredWidth(300);
        tabla_encontrados.getColumnModel().getColumn(10).setPreferredWidth(200);
    }//GEN-LAST:event_buscarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        try {
            int registroSelccionado = tabla_encontrados.getSelectedRow();
            consultaEstudiante.first();
            jLabel4.setText("Seleccionado = "+registroSelccionado);
            if (registroSelccionado != -1) {
                // Obtengo el regitro seleccionado (desde la consulta)
                for(int i=0; i<registroSelccionado; i++)
                    consultaEstudiante.next();
                // Hago una consulta para obtener la información del Encargado
                Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet consultaEncargado = sentencia.executeQuery("SELECT Encargado.*, Municipio.Nombre Municipio FROM Encargado "
                        + "INNER JOIN Municipio ON Encargado.Municipio_Id = Municipio.Id "
                        + " WHERE Encargado.Nombre = '"+consultaEstudiante.getString("Encargado")+"'");
                consultaEncargado.next();
                // Creación de la Ventana para Editar los datos del Estudiante
                EditarEstudiante editarEstudiante = new EditarEstudiante(conexion, consultaEstudiante, consultaEncargado);
                editarEstudiante.setVisible(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InformacionEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editarActionPerformed
    private void extraerDatos(int filtro, String campoBusqueda) {
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            switch (filtro) {
                // 'filtro == 1': Búsqueda por Apellidos
                case 1:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.Apellidos = '"+campoBusqueda+"'");
                break;
                // 'filtro == 2': Búsqueda por Código Personal
                case 2:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.CodigoPersonal = '"+campoBusqueda+"'");
                break;
                // 'filtro == 3': Búsqueda por CUI
                case 3:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.CUI = '"+campoBusqueda+"'");
                break;
                // 'fitro == 0': Sin especificar (devuelve todo el contenido de la tabla de la BD)
                default:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id");
                break;
            }   // Hasta aquí se han cargado los datos
            
            /** Obtención de los Metadatos
            ResultSetMetaData columnas = consulta.getMetaData();
            int cantidadColumnas = columnas.getColumnCount();
            for(int i=1; i<=cantidadColumnas; i++)
                tabla.addColumn(columnas.getColumnLabel(i));**/
            // Obtención e inserción de las filas en 'tabla'
            while (consultaEstudiante.next()) {
                String[] registro = new String[11];
                registro[0] = consultaEstudiante.getString("Id");
                registro[1] = consultaEstudiante.getString("CodigoPersonal");
                registro[2] = consultaEstudiante.getString("CUI");
                registro[3] = consultaEstudiante.getString("Nombres")+" "+ consultaEstudiante.getString("Apellidos");
                registro[4] = consultaEstudiante.getString("Direccion") + ", " + consultaEstudiante.getString("Municipio");
                registro[5] = consultaEstudiante.getString("FechaNacimiento");
                registro[6] = consultaEstudiante.getString("Sexo");
                registro[7] = consultaEstudiante.getString("Etnia");
                if (consultaEstudiante.getBoolean("CapacidadDiferente")) {
                    registro[8] = "Si";
                    registro[9] = consultaEstudiante.getString("TipoCapacidad");
                } else {
                    registro[8] = "No";
                    registro[9] = "<No existente>";
                }
                registro[10] = consultaEstudiante.getString("Encargado");
                tablaModel.addRow(registro); // Inserción del i-ésimo registro en la tabla
            }
//            consultaEstudiante.close();   // No cierro la consulta pues me servirá para modificar algún registro
        } catch (SQLException ex) {
            Logger.getLogger(InformacionEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformacionEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformacionEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformacionEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformacionEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformacionEstudiante().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JTextField campo_busqueda;
    private javax.swing.JButton editar;
    private javax.swing.JComboBox<String> filtro_busqueda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_encontrados;
    private javax.swing.JButton ver_notas;
    // End of variables declaration//GEN-END:variables
}
