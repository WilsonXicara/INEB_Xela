/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Catedratico;

import Modulo_Estudiante.ExcepcionDatosIncorrectos;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Wilson Xicará
 */
public class CrearCatedratico extends javax.swing.JFrame {
    private Connection conexion;
    private JFrame ventanaPadre;
    private boolean hacerVisible;
    private ArrayList<Integer> listaIDMunicipios, listaIDCatedraticos, listaIDMunicipioEncargado;
    private int indexCatedraticoEditado;
    private TableRowSorter filtroTabla;
    
    public CrearCatedratico() {
        initComponents();
    }
    public CrearCatedratico(Connection conexion, JFrame ventanaPadre){
        initComponents();
        this.conexion  = conexion;
        this.ventanaPadre = ventanaPadre;
        hacerVisible = true;
        
        // Obtención de los datos necesarios desde la Base de Datos
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cConsulta;
            // Obtención del listado de Municipios (con su respectivo ID)
            cConsulta = sentencia.executeQuery("SELECT * FROM Municipio");
            listaIDMunicipios = new ArrayList<>();
            while (cConsulta.next()) {
                listaIDMunicipios.add(cConsulta.getInt("Id"));
                Campo_Municipio.addItem(cConsulta.getString("Nombre"));
            }
            // Obtención del listado de todos los catedráticos almacenados en la Base de Datos (un Catedrático tiene sólo un número de teléfono)
            cConsulta = sentencia.executeQuery("SELECT C.Id idCatedratico, C.Nombres, C.Apellidos, C.Direccion, C.DPI, C.Sexo, C.Etnia, M.Id idMunicipio, M.Nombre Municipio, T.Telefono FROM Catedratico C "
                    + "INNER JOIN Municipio M ON C.Municipio_Id = M.Id "
                    + "LEFT JOIN Telefono T ON T.Catedratico_Id = C.Id "
                    + "GROUP BY C.Id");
            listaIDCatedraticos = new ArrayList<>();
            listaIDMunicipioEncargado = new ArrayList<>();
            DefaultTableModel modelDatos = (DefaultTableModel)Tabla_Datos.getModel();
            while (cConsulta.next()) {
                listaIDCatedraticos.add(cConsulta.getInt("idCatedratico"));
                listaIDMunicipioEncargado.add(cConsulta.getInt("idMunicipio"));
                modelDatos.addRow(new String[]{
                    ""+(modelDatos.getRowCount()+1),
                    cConsulta.getString("DPI"),
                    cConsulta.getString("Nombres"),
                    cConsulta.getString("Apellidos"),
                    cConsulta.getString("Direccion"),
                    cConsulta.getString("Municipio"),
                    "M".equals(cConsulta.getString("Sexo")) ? "Masculino" : "Femenino",
                    cConsulta.getString("Etnia"),
                    cConsulta.getString("Telefono")==null ? "" : cConsulta.getString("Telefono")
                });
            }
            // Otras configuraciones importantes
            filtroTabla = new TableRowSorter(Tabla_Datos.getModel()); // Objeto que permite filtrar filas de la Tabla
            this.setLocationRelativeTo(null);
        } catch (SQLException ex) {
            hacerVisible = false;
            JOptionPane.showMessageDialog(this, "No se pudo obtener algunos datos.\n\nDescripción:\n"+ex.getMessage(), "Error en conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
        }
        ventanaPadre.setEnabled(!hacerVisible); // Si no se mostrará esta ventana, habilito ventanaPadre para evitar que quede inhabilitada
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_datos_catedrático = new javax.swing.JPanel();
        Campo = new javax.swing.JLabel();
        Campo1 = new javax.swing.JLabel();
        Campo2 = new javax.swing.JLabel();
        Campo3 = new javax.swing.JLabel();
        Campo_Nombres = new javax.swing.JTextField();
        Campo_Apellidos = new javax.swing.JTextField();
        Campo_Direccion = new javax.swing.JTextField();
        Campo_Telefono = new javax.swing.JTextField();
        Campo5 = new javax.swing.JLabel();
        Campo6 = new javax.swing.JLabel();
        Campo_DPI = new javax.swing.JTextField();
        Campo8 = new javax.swing.JLabel();
        Campo_Municipio = new javax.swing.JComboBox<>();
        Campo_Etnia = new javax.swing.JTextField();
        Campo4 = new javax.swing.JLabel();
        crear_catedrático = new javax.swing.JButton();
        guardar_cambios = new javax.swing.JButton();
        Campo_Sexo_Masculino = new javax.swing.JRadioButton();
        Campo_Sexo_Femenino = new javax.swing.JRadioButton();
        cancelar_modificacion = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        boton_regresar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_Datos = new javax.swing.JTable();
        Campo_busqueda = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Campo_Filtro_busqueda = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Módulo Catedrático");
        setBackground(new java.awt.Color(0, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panel_datos_catedrático.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del cátedratico:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        Campo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo.setText("Nombres:");

        Campo1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo1.setText("Apellidos:");

        Campo2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo2.setText("Dirección:");

        Campo3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo3.setText("Teléfono:");

        Campo_Nombres.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Campo_Apellidos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Campo_Direccion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Campo_Telefono.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Campo_Telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Campo_TelefonoKeyTyped(evt);
            }
        });

        Campo5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo5.setText("Sexo:");

        Campo6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo6.setText("Etnia:");

        Campo_DPI.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Campo_DPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Campo_DPIKeyTyped(evt);
            }
        });

        Campo8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo8.setText("Municipio:");

        Campo_Municipio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Campo_Etnia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        Campo4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo4.setText("DPI:");

        crear_catedrático.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        crear_catedrático.setText("Crear");
        crear_catedrático.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_catedráticoActionPerformed(evt);
            }
        });

        guardar_cambios.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        guardar_cambios.setText("Modificar");
        guardar_cambios.setEnabled(false);
        guardar_cambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_cambiosActionPerformed(evt);
            }
        });

        Campo_Sexo_Masculino.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Campo_Sexo_Masculino.setSelected(true);
        Campo_Sexo_Masculino.setText("Masculino");
        Campo_Sexo_Masculino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Campo_Sexo_MasculinoItemStateChanged(evt);
            }
        });

        Campo_Sexo_Femenino.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Campo_Sexo_Femenino.setText("Femenino");
        Campo_Sexo_Femenino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Campo_Sexo_FemeninoItemStateChanged(evt);
            }
        });

        cancelar_modificacion.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cancelar_modificacion.setText("Cancelar");
        cancelar_modificacion.setEnabled(false);
        cancelar_modificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar_modificacionActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout panel_datos_catedráticoLayout = new javax.swing.GroupLayout(panel_datos_catedrático);
        panel_datos_catedrático.setLayout(panel_datos_catedráticoLayout);
        panel_datos_catedráticoLayout.setHorizontalGroup(
            panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Campo4)
                    .addComponent(Campo)
                    .addComponent(Campo1)
                    .addComponent(Campo2)
                    .addComponent(Campo8)
                    .addComponent(Campo5)
                    .addComponent(Campo6)
                    .addComponent(Campo3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Campo_Nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo_DPI, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Campo_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campo_Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campo_Municipio, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                        .addComponent(Campo_Sexo_Masculino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Campo_Sexo_Femenino))
                    .addComponent(Campo_Apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campo_Etnia, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelar_modificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardar_cambios, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crear_catedrático, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_datos_catedráticoLayout.setVerticalGroup(
            panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_DPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_Nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_Apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_Municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo5)
                            .addComponent(Campo_Sexo_Masculino)
                            .addComponent(Campo_Sexo_Femenino))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Campo_Etnia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Campo6)))
                    .addGroup(panel_datos_catedráticoLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(crear_catedrático, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(guardar_cambios, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelar_modificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_catedráticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Campo_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Campo3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        boton_regresar.setText("Regresar");
        boton_regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_regresarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de Catedráticos:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Valor:");

        Tabla_Datos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        Tabla_Datos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Tabla_Datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "DPI", "Nombres", "Apellidos", "Dirección", "Municipio", "Sexo", "Etnia", "Teléfono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla_Datos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        Tabla_Datos.setFocusable(false);
        Tabla_Datos.setRowHeight(25);
        Tabla_Datos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Tabla_Datos.getTableHeader().setReorderingAllowed(false);
        Tabla_Datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabla_DatosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla_Datos);

        Campo_busqueda.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo_busqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Campo_busquedaKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Filtrar por:");

        Campo_Filtro_busqueda.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Campo_Filtro_busqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODO", "DPI", "Nombres", "Apellidos" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setText("Dar doble clic sobre un registro para editarlo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Campo_Filtro_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Campo_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                .addComponent(jLabel3))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Campo_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(Campo_Filtro_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_datos_catedrático, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(boton_regresar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(boton_regresar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_datos_catedrático, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Campo_Sexo_MasculinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Campo_Sexo_MasculinoItemStateChanged
        Campo_Sexo_Femenino.setSelected(!Campo_Sexo_Masculino.isSelected());
    }//GEN-LAST:event_Campo_Sexo_MasculinoItemStateChanged

    private void Campo_Sexo_FemeninoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Campo_Sexo_FemeninoItemStateChanged
        Campo_Sexo_Masculino.setSelected(!Campo_Sexo_Femenino.isSelected());
    }//GEN-LAST:event_Campo_Sexo_FemeninoItemStateChanged

    private void Campo_TelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Campo_TelefonoKeyTyped
        if (!Pattern.compile("\\d").matcher(""+evt.getKeyChar()).matches() || Campo_Telefono.getText().length() == 8)
            evt.consume();
    }//GEN-LAST:event_Campo_TelefonoKeyTyped

    private void crear_catedráticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_catedráticoActionPerformed
        try {
            validar_datos(true);    // Compruebo que los datos sean correctos y que no se repita el nuevo registro en la BD
            String instruccion = "INSERT INTO Catedratico(Nombres, Apellidos, Direccion, DPI, Sexo, Etnia, Municipio_Id) VALUES(";
            instruccion+= "'"+Campo_Nombres.getText()+"', ";
            instruccion+= "'"+Campo_Apellidos.getText()+"', ";
            instruccion+= "'"+Campo_Direccion.getText()+"', ";
            instruccion+= "'"+Campo_DPI.getText()+"', ";
            instruccion+= "'"+(Campo_Sexo_Masculino.isSelected() ? "M" : "F")+"', ";
            instruccion+= "'"+Campo_Etnia.getText()+"', ";
            instruccion+= listaIDMunicipios.get(Campo_Municipio.getSelectedIndex())+")";
            conexion.prepareStatement(instruccion).executeUpdate();  // Inserción en la Base de Datos del registro Catedrático
            // Obtención del ID (dentro de la Base de Datos) del registro recien insertado
            ResultSet cConsulta = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
                    .executeQuery("SELECT LAST_INSERT_ID()");
            cConsulta.next();
            JOptionPane.showMessageDialog(this, "Registro creado exitosamente", "Crear registro", JOptionPane.INFORMATION_MESSAGE);
            listaIDCatedraticos.add(cConsulta.getInt(1));   // Almaceno el ID del Catedrático creado
            listaIDMunicipioEncargado.add(listaIDMunicipios.get(Campo_Municipio.getSelectedIndex()));   // Almaceno el ID del Municipio del Catedrático
            // Agregación del registro Catedrático a la tabla de datos
            DefaultTableModel modelDatos = (DefaultTableModel)Tabla_Datos.getModel();
            modelDatos.addRow(new String[]{
                    ""+(modelDatos.getRowCount()+1),
                    Campo_DPI.getText(),
                    Campo_Nombres.getText(),
                    Campo_Apellidos.getText(),
                    Campo_Direccion.getText(),
                    (String)Campo_Municipio.getSelectedItem(),
                    Campo_Sexo_Masculino.isSelected() ? "Masculino" : "Femenino",
                    Campo_Etnia.getText(),
                    Campo_Telefono.getText()
                });
            // Hasta aquí se garantiza la creación de un nuevo Catedrático en la Base de Datos
            limpiar_campos();
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "No se puede crear el nuevo registro.\n\nDescripción:\n"+ex.getMessage(), "Error en conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_crear_catedráticoActionPerformed

    private void Campo_busquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Campo_busquedaKeyPressed
        // Obtengo el tipo de filtro en el que se basará la búsqueda
        int filtro = Campo_Filtro_busqueda.getSelectedIndex();
        // Si filtro==0 se buscará cualquier coincidencia (tanto DPI, Nombres o Apellidos). En caso contrario, se busca en la columna 'filtro'
        if (filtro == 0)
            filtroTabla.setRowFilter(RowFilter.regexFilter(Campo_busqueda.getText()));
        else
            filtroTabla.setRowFilter(RowFilter.regexFilter(Campo_busqueda.getText(), filtro));
        Tabla_Datos.setRowSorter(filtroTabla);
    }//GEN-LAST:event_Campo_busquedaKeyPressed

    private void Tabla_DatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabla_DatosMouseClicked
        // EVENTO QUE PERMITE CARGAR LOS DATOS DEL REGISTRO SELECCIONADO PARA PODER MODIFICARLOS
        if (evt.getClickCount() > 1) {  // Se cargan los datos del registro seleccionado y se habilita la edición
            indexCatedraticoEditado = filtroTabla.convertRowIndexToModel(Tabla_Datos.getSelectedRow());
            // Carga de los datos del registro seleccionado a los campos correspondientes
            Campo_DPI.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 1));
            Campo_DPI.setEditable(false);   // El DPI es el único atributo que no se puede editar
            Campo_Nombres.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 2));
            Campo_Apellidos.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 3));
            Campo_Direccion.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 4));
            Campo_Municipio.setSelectedIndex(listaIDMunicipios.indexOf(listaIDMunicipioEncargado.get(indexCatedraticoEditado)));
            Campo_Sexo_Masculino.setSelected("Masculino".equals((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 6)));
            Campo_Etnia.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 7));
            Campo_Telefono.setText((String)Tabla_Datos.getValueAt(indexCatedraticoEditado, 8));
            crear_catedrático.setEnabled(false);    // Inahilito el botón de crear catedrático
            guardar_cambios.setEnabled(true); // Habilito los botones de la edición
            cancelar_modificacion.setEnabled(true);
        }
    }//GEN-LAST:event_Tabla_DatosMouseClicked

    private void guardar_cambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_cambiosActionPerformed
        try {
            validar_datos(false);    // Compruebo que los datos sean correctos (el DPI no cambia, por lo que no se busca repetidos)
            listaIDMunicipioEncargado.set(indexCatedraticoEditado, listaIDMunicipios.get(Campo_Municipio.getSelectedIndex()));
            String instruccion = "UPDATE Catedratico SET";
            instruccion+= " Nombres = '"+Campo_Nombres.getText()+"', ";
            instruccion+= " Apellidos = '"+Campo_Apellidos.getText()+"', ";
            instruccion+= " Direccion = '"+Campo_Direccion.getText()+"', ";
            instruccion+= " Sexo = '"+(Campo_Sexo_Masculino.isSelected() ? "M" : "F")+"', ";
            instruccion+= " Etnia = '"+Campo_Etnia.getText()+"', ";
            instruccion+= " Municipio_Id = "+listaIDMunicipioEncargado.get(indexCatedraticoEditado);
            instruccion+= " WHERE Id ="+listaIDCatedraticos.get(indexCatedraticoEditado);
            conexion.prepareStatement(instruccion).executeUpdate(); // Actualizo el registro
            // Para actualizar el número de teléfono, compruebo que ya exista (y lo actualizo) o sino lo creo
            ResultSet cConsulta = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
                    .executeQuery("SELECT Id FROM Telefono WHERE Catedratico_Id = "+listaIDCatedraticos.get(indexCatedraticoEditado));
            int idTelefono = cConsulta.next() ? cConsulta.getInt(1) : -1;
            instruccion = (idTelefono == -1) ?
                    "INSERT INTO Telefono(Telefono, Catedratico_Id) VALUES('"+Campo_Telefono.getText()+"', "+listaIDCatedraticos.get(indexCatedraticoEditado)+")":
                    "UPDATE Telefono SET Telefono = '"+Campo_Telefono.getText()+"' WHERE Catedratico_Id = "+listaIDCatedraticos.get(indexCatedraticoEditado);
            conexion.prepareStatement(instruccion).executeUpdate(); // Actualizo o creo el registro
            JOptionPane.showMessageDialog(this, "Registro editado exitosamente", "Editar registro", JOptionPane.INFORMATION_MESSAGE);
            // Hasta aquí se garantiza la actualización de un registro Catedrático
            
            // Actualización de los datos en la Tabla (el DPI no cambió)
            Tabla_Datos.setValueAt(Campo_Nombres.getText(), indexCatedraticoEditado, 2);
            Tabla_Datos.setValueAt(Campo_Apellidos.getText(), indexCatedraticoEditado, 3);
            Tabla_Datos.setValueAt(Campo_Direccion.getText(), indexCatedraticoEditado, 4);
            Tabla_Datos.setValueAt((String)Campo_Municipio.getSelectedItem(), indexCatedraticoEditado, 5);
            Tabla_Datos.setValueAt((Campo_Sexo_Masculino.isSelected() ? "Masculino" : "Femenino"), indexCatedraticoEditado, 6);
            Tabla_Datos.setValueAt(Campo_Etnia.getText(), indexCatedraticoEditado, 7);
            Tabla_Datos.setValueAt(Campo_Telefono.getText(), indexCatedraticoEditado, 8);
            
            limpiar_campos();   // Borro los datos cargados
            Campo_DPI.setEditable(true);    // Habilito la edición en dicho campo
            crear_catedrático.setEnabled(true); // Habilito el botón para crear catedráticos
            guardar_cambios.setEnabled(false);  // Inhabilito los botones de la edición
            cancelar_modificacion.setEnabled(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "No se puede actualizar el registro.\n\nDescripción:\n"+ex.getMessage(), "Error en conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardar_cambiosActionPerformed

    private void cancelar_modificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar_modificacionActionPerformed
        // EVENTO PARA CANCELAR LA EDICIÓN DE UN REGISTRO CATEDRÁTICO
        limpiar_campos();   // Borro los datos cargados
        Campo_DPI.setEditable(true);    // Habilito la edición en dicho campo
        crear_catedrático.setEnabled(true); // Habilito el botón para crear catedráticos
        guardar_cambios.setEnabled(false);  // Inhabilito los botones de la edición
        cancelar_modificacion.setEnabled(false);
    }//GEN-LAST:event_cancelar_modificacionActionPerformed

    private void boton_regresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_regresarActionPerformed
        // Botón para volver a la ventana anterior
        ventanaPadre.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_boton_regresarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ventanaPadre.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void Campo_DPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Campo_DPIKeyTyped
        if (!Pattern.compile("\\d").matcher(""+evt.getKeyChar()).matches() || Campo_DPI.getText().length() == 13)
            evt.consume();
    }//GEN-LAST:event_Campo_DPIKeyTyped

    private void validar_datos(boolean buscarRepetido) throws ExcepcionDatosIncorrectos {
        if (Campo_DPI.getText().length() != 13)
            throw new ExcepcionDatosIncorrectos("El DPI debe tener de 13 dígitos");
        // Verifico que no exista un Catedrático con el mismo DPI (se ser así, se repite el registro)
        if (buscarRepetido) {
            try {
                ResultSet cConsulta = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
                        .executeQuery("SELECT COUNT(Id) FROM Catedratico WHERE DPI = '"+Campo_DPI.getText()+"'");
                cConsulta.next();
                if (cConsulta.getInt(1) > 0)
                    throw new ExcepcionDatosIncorrectos("Ya existe un Catedrático con el mismo DPI.\nNo se puede crear uno nuevo");
            } catch (SQLException ex) {
                Logger.getLogger(CrearCatedratico.class.getName()).log(Level.SEVERE, null, ex);
                throw new ExcepcionDatosIncorrectos("No se puede comprobar si existe un registro con el mismo DPI");
            }
        }
        if (Campo_Nombres.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No ha especificado los Nombres");
        if (Campo_Apellidos.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No ha especificado los Apellidos");
        if (Campo_Direccion.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No ha especificado la Dirección");
        if (Campo_Etnia.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No ha especificado la Etnia");
        if (Campo_Telefono.getText().length() > 0 && Campo_Telefono.getText().length() != 8)
            throw new ExcepcionDatosIncorrectos("El número de Teléfono debe tener 8 dígitos");
    }
    private void limpiar_campos() {
        Campo_DPI.setText("");
        Campo_Nombres.setText("");
        Campo_Apellidos.setText("");
        Campo_Direccion.setText("");
        Campo_Municipio.setSelectedIndex(0);
        Campo_Sexo_Masculino.setSelected(true);
        Campo_Etnia.setText("");
        Campo_Telefono.setText("");
    }
    public boolean getHacerVisible() { return hacerVisible; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearCatedratico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearCatedratico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Campo;
    private javax.swing.JLabel Campo1;
    private javax.swing.JLabel Campo2;
    private javax.swing.JLabel Campo3;
    private javax.swing.JLabel Campo4;
    private javax.swing.JLabel Campo5;
    private javax.swing.JLabel Campo6;
    private javax.swing.JLabel Campo8;
    private javax.swing.JTextField Campo_Apellidos;
    private javax.swing.JTextField Campo_DPI;
    private javax.swing.JTextField Campo_Direccion;
    private javax.swing.JTextField Campo_Etnia;
    private javax.swing.JComboBox<String> Campo_Filtro_busqueda;
    private javax.swing.JComboBox<String> Campo_Municipio;
    private javax.swing.JTextField Campo_Nombres;
    private javax.swing.JRadioButton Campo_Sexo_Femenino;
    private javax.swing.JRadioButton Campo_Sexo_Masculino;
    private javax.swing.JTextField Campo_Telefono;
    private javax.swing.JTextField Campo_busqueda;
    private javax.swing.JTable Tabla_Datos;
    private javax.swing.JButton boton_regresar;
    private javax.swing.JButton cancelar_modificacion;
    private javax.swing.JButton crear_catedrático;
    private javax.swing.JButton guardar_cambios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panel_datos_catedrático;
    // End of variables declaration//GEN-END:variables
}
