/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModuloAsignacion;

import ModuloEstudiante.InformacionEstudiante;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pc
 */
public class AsignarEstudiante extends javax.swing.JFrame {
    private Connection conexion;
    private ResultSet consultaEstudiante;
    private DefaultTableModel tablaModel;
    /**
     * Creates new form AsignarEstudiante
     */
    public AsignarEstudiante() {
        initComponents();
        this.consultaEstudiante = null;
        this.conexion = null;
        tablaModel = new DefaultTableModel();
        // Definición de las columnas de 'tablaModel'
        tablaModel.addColumn("Id");
        tablaModel.addColumn("Código Personal");
        tablaModel.addColumn("CUI");
        tablaModel.addColumn("Nombre");
        tablaModel.addColumn("Dirección");
        tablaModel.addColumn("Fecha Nacimiento");
        tablaModel.addColumn("Sexo");
        tablaModel.addColumn("Etnia");
        tablaModel.addColumn("Capacidad Diferente");
        tablaModel.addColumn("Tipo Capacidad");
        tablaModel.addColumn("Encargado");
        extraerDatos(0, "Sin especificar");
        tabla_estudiantes.setModel(tablaModel);
    }
    public AsignarEstudiante(Connection conexion, int tipoUsuario) {
        initComponents();
        this.conexion = conexion;
        this.consultaEstudiante = null;
        tablaModel = new DefaultTableModel();
        // Definición de las columnas de 'tablaModel'
        tablaModel.addColumn("Id");
        tablaModel.addColumn("Código Personal");
        tablaModel.addColumn("CUI");
        tablaModel.addColumn("Nombre");
        tablaModel.addColumn("Dirección");
        tablaModel.addColumn("Fecha Nacimiento");
        tablaModel.addColumn("Sexo");
        tablaModel.addColumn("Etnia");
        tablaModel.addColumn("Capacidad Diferente");
        tablaModel.addColumn("Tipo Capacidad");
        tablaModel.addColumn("Encargado");
        extraerDatos(0, "Sin especificar");
        tabla_estudiantes.setModel(tablaModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_estudiantes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Asignación de Estudiantes");

        tabla_estudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_estudiantes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignarEstudiante().setVisible(true);
            }
        });
    }
    private void extraerDatos(int filtro, String campoBusqueda) {
        System.out.println("Se hará la consulta");
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            switch (filtro) {
                // 'filtro == 1': Búsqueda por Apellidos
                case 1:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.Apellidos = '"+campoBusqueda+"'");
                break;
                // 'filtro == 2': Búsqueda por Código Personal
                case 2:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.CodigoPersonal = '"+campoBusqueda+"'");
                break;
                // 'filtro == 3': Búsqueda por CUI
                case 3:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id "
                            + "WHERE Estudiante.CUI = '"+campoBusqueda+"'");
                break;
                // 'fitro == 0': Sin especificar (devuelve todo el contenido de la tabla de la BD)
                default:
                    consultaEstudiante = sentencia.executeQuery("SELECT Estudiante.*, Municipio.Nombre Municipio, Encargado.Nombre Encargado FROM Estudiante "
                            + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                            + "INNER JOIN Encargado ON Estudiante.Encargado_Id = Encargado.Id");
                break;
            }   // Hasta aquí se han cargado los datos
            
            /** Obtención de los Metadatos
            ResultSetMetaData columnas = consulta.getMetaData();
            int cantidadColumnas = columnas.getColumnCount();
            for(int i=1; i<=cantidadColumnas; i++)
                tabla.addColumn(columnas.getColumnLabel(i));**/
            // Obtención e inserción de las filas en 'tabla'
            while (consultaEstudiante.next()) {
                String[] registro = new String[11];
                registro[0] = consultaEstudiante.getString("Id");
                registro[1] = consultaEstudiante.getString("CodigoPersonal");
                registro[2] = consultaEstudiante.getString("CUI");
                registro[3] = consultaEstudiante.getString("Nombres")+" "+ consultaEstudiante.getString("Apellidos");
                registro[4] = consultaEstudiante.getString("Direccion") + ", " + consultaEstudiante.getString("Municipio");
                registro[5] = consultaEstudiante.getString("FechaNacimiento");
                registro[6] = consultaEstudiante.getString("Sexo");
                registro[7] = consultaEstudiante.getString("Etnia");
                if (consultaEstudiante.getBoolean("CapacidadDiferente")) {
                    registro[8] = "Si";
                    registro[9] = consultaEstudiante.getString("TipoCapacidad");
                } else {
                    registro[8] = "No";
                    registro[9] = "<No existente>";
                }
                registro[10] = consultaEstudiante.getString("Encargado");
                tablaModel.addRow(registro); // Inserción del i-ésimo registro en la tabla
            }
//            consultaEstudiante.close();   // No cierro la consulta pues me servirá para modificar algún registro
        } catch (SQLException ex) {
            Logger.getLogger(InformacionEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla_estudiantes;
    // End of variables declaration//GEN-END:variables
}
