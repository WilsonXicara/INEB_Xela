/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModuloAsignacionEST;

import ModuloEstudiante.RegistroCiclo;
import ModuloEstudiante.RegistroGrado;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que permite crear UNA ASIGNACIÓN O UNA REASIGNACIÓN PARA UN ESTUDIANTE. Para ello, se evalua si la Asignación que
 * se quiere crear ya existe (que exista un registro de Asignación correspondiente al Ciclo Escolar seleccionado).
 * En el caso de que el Ciclo Escolar seleccionado aún no esté Listo o ya fue Cerrado, se deshabilita el botón para Crear
 * la Asignación.
 * @author Wilson Xicará
 */
public class AsignarEstudiante extends javax.swing.JDialog {
    private Connection conexion;
    private DefaultTableModel modelEstudiante, modelCursos;
    private boolean paraReasignacion, ciclosCargados, hacerVisible;
    private RegistroAsignacionEST estudiante;
    private ArrayList<RegistroCiclo> listaCiclos;
    /**
     * Creates new form AsignacionEST
     */
    public AsignarEstudiante(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    /**
     * 
     * @param parent
     * @param modal
     * @param conexion
     * @param listaCiclos esto para evitar hacer nuevamente una consulta que ya habré realizado
     * @param estudiante
     * @param paraReasignacion 
     */
    public AsignarEstudiante(java.awt.Frame parent, boolean modal, Connection conexion, ArrayList<RegistroCiclo> listaCiclos, RegistroAsignacionEST estudiante, boolean paraReasignacion) {
        super(parent, modal);
        initComponents();
        this.conexion = conexion;
        this.paraReasignacion = paraReasignacion;
        this.estudiante = estudiante;
        this.ciclosCargados = false;
        this.hacerVisible = true;
        this.listaCiclos = listaCiclos;
        
        modelEstudiante = (DefaultTableModel)tabla_info_estudiante.getModel();
        modelCursos = (DefaultTableModel)tabla_info_cursos.getModel();
        // Inserto el Título de la Ventana, que tendrá el nombre del(la) estudiante
        this.setTitle(((paraReasignacion)?"Rea":"A")+"signación "+((estudiante.getSexo().equals("F"))?"de la":"del")+" estudiante "+estudiante.getNombres()+" "+estudiante.getApellidos());
        // Muestro la información del Estudiante
        panel_info_estudiante.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información "+((estudiante.getSexo().equals("F"))?"de la":"del")+" estudiante:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14)));
        boolean asignacionAnterior = estudiante.isAsignacionAnterior();
        modelEstudiante.addRow(new String[]{
            estudiante.getCodigoPersonal(),
            estudiante.getCUI(),
            estudiante.getNombres()+" "+estudiante.getApellidos(),
            (asignacionAnterior)?"SI":"No",
            (asignacionAnterior)?estudiante.getAnio():"",
            (asignacionAnterior)?estudiante.getGrado()+" "+estudiante.getSeccion():""
        });
        // Los Ciclos Escolares se pasaron como parámetro desde PrincipalAsignacionEST. Se cargan al JComboBox
        int cantidadCiclos = listaCiclos.size();
        for(int i=0; i<cantidadCiclos; i++)
            ciclo_escolar.addItem(listaCiclos.get(i).getAnio());
        ciclosCargados = true;
        ciclo_escolar.setSelectedIndex(-1); // Esta opción es para generar una llamada al itemStateChange en caso de sólo encontrar un ciclo
        ciclo_escolar.setSelectedIndex(ciclo_escolar.getItemCount() - 1);   // Selecciono por defecto el último Ciclo Esoclar
        definir_ancho_columnas();
        this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla.
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_info_estudiante = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_info_estudiante = new javax.swing.JTable();
        panel_info_asignacion = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ciclo_escolar = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        grado = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_info_cursos = new javax.swing.JTable();
        crear_asignacion = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        etiqueta_aviso = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Asignación de Estudiantes");

        panel_info_estudiante.setBackground(new java.awt.Color(153, 153, 255));
        panel_info_estudiante.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del(la) estudiante:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabla_info_estudiante.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabla_info_estudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código Personal", "CUI", "Nombre Completo", "Asignación Anterior", "Ciclo Escolar", "Grado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_info_estudiante.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_info_estudiante.setRowHeight(25);
        tabla_info_estudiante.getTableHeader().setResizingAllowed(false);
        tabla_info_estudiante.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabla_info_estudiante);

        javax.swing.GroupLayout panel_info_estudianteLayout = new javax.swing.GroupLayout(panel_info_estudiante);
        panel_info_estudiante.setLayout(panel_info_estudianteLayout);
        panel_info_estudianteLayout.setHorizontalGroup(
            panel_info_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
        );
        panel_info_estudianteLayout.setVerticalGroup(
            panel_info_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
        );

        panel_info_asignacion.setBackground(new java.awt.Color(153, 153, 255));
        panel_info_asignacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información Asignación/Reasignación:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Grado:");

        ciclo_escolar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ciclo_escolar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciclo_escolarItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Ciclo escolar:");

        grado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        grado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gradoItemStateChanged(evt);
            }
        });

        tabla_info_cursos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabla_info_cursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_info_cursos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_info_cursos.setRowHeight(25);
        tabla_info_cursos.getTableHeader().setResizingAllowed(false);
        tabla_info_cursos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tabla_info_cursos);

        crear_asignacion.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        crear_asignacion.setText("Crear Asignación");
        crear_asignacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_asignacionActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Cursos:");

        etiqueta_aviso.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout panel_info_asignacionLayout = new javax.swing.GroupLayout(panel_info_asignacion);
        panel_info_asignacion.setLayout(panel_info_asignacionLayout);
        panel_info_asignacionLayout.setHorizontalGroup(
            panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_info_asignacionLayout.createSequentialGroup()
                .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_info_asignacionLayout.createSequentialGroup()
                        .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ciclo_escolar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(panel_info_asignacionLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(crear_asignacion, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_info_asignacionLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(349, 349, 349))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)))
            .addComponent(etiqueta_aviso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_info_asignacionLayout.setVerticalGroup(
            panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_info_asignacionLayout.createSequentialGroup()
                .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_info_asignacionLayout.createSequentialGroup()
                        .addGroup(panel_info_asignacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ciclo_escolar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(grado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                        .addComponent(crear_asignacion, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(etiqueta_aviso, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_info_asignacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_info_estudiante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_info_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_info_asignacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ciclo_escolarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciclo_escolarItemStateChanged
        // Cada vez que se selecciona un nuevo ciclo escolar se deben actualizar 'grado' con los grados del ciclo seleccionado
        int indexCiclo = ciclo_escolar.getSelectedIndex();
        if (ciclosCargados && indexCiclo != -1) {
            RegistroCiclo cicloSelec = listaCiclos.get(indexCiclo);
            grado.removeAllItems();
            ArrayList<RegistroGrado> listaGrados = cicloSelec.getGrados();
            int cantidad = listaGrados.size();
            if (cantidad == 0) {    // Si el ArrayList está vacío, aún no se han cargado los grados de dicho ciclo
                // Ahora obtengo los Grados asociados a cada Ciclo Escolar seleccionado en el JComboBox correspondiente
                try {
                    Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                    ResultSet cGrados = sentencia.executeQuery("SELECT AsignacionCAT.CicloEscolar_Id idCiclo, AsignacionCAT.Grado_Id idGrado, Grado.Nombre, Grado.Seccion, COUNT(AsignacionCAT.Grado_Id) grados FROM AsignacionCAT "
                            + "INNER JOIN Grado ON AsignacionCAT.Grado_Id = Grado.Id "
                            + "WHERE AsignacionCAT.CicloEscolar_Id = "+(indexCiclo+1)+" "
                            + "GROUP BY AsignacionCAT.Grado_Id");
                    // Cargo al ArrayList todos los Grados del Ciclo Escolar seleccionado. El ID de cada ciclo es correlativo a su posición en el ArrayList
                    while (cGrados.next())
                        listaGrados.add(new RegistroGrado(cGrados.getInt("idGrado"), cGrados.getString("Nombre"), cGrados.getString("Seccion")));
                    // Hasta aquí se garantiza la carga de todos los grados
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al intentar obtener los grados:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//                    Logger.getLogger(PrincipalAsignacionEST.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            // Ahora cargo los Grados encontrados al JComboBox
            cantidad = listaGrados.size();
            for(int i=0; i<cantidad; i++)
                grado.addItem(listaGrados.get(i).getGradoSeccion());
            // Compruebo que el Ciclo seleccionado esté Listo y que no esté cerrado
            if (!cicloSelec.isCicloListo() || cicloSelec.isCicloCerrado()) {
                // No se puede realizar la Asignación al Ciclo seleccionado
                etiqueta_aviso.setText("No se puede Asignar al Ciclo "+cicloSelec.getAnio()+"."
                        +(!cicloSelec.isCicloListo()?"\nEl Ciclo aún no está listo.":"")
                        +(cicloSelec.isCicloCerrado()?"\nEl Ciclo ya fue cerrado.":"")
                        +"\n\nConsulte con el Administrador para más información.");
                crear_asignacion.setEnabled(false); // Inhabilito el botón para no poder hacer Asignaciones
            } else {
                etiqueta_aviso.setText((cantidad==0?"Advertencia: Puede asignar estudiantes al ciclo "+cicloSelec.getAnio()+", aunque no tenga cursos":""));
                grado.setSelectedIndex((cantidad == 0) ? -1 : 0);
                crear_asignacion.setEnabled(true);  // Habilito el botón para crear la Asignación
            }
        }
    }//GEN-LAST:event_ciclo_escolarItemStateChanged

    private void crear_asignacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_asignacionActionPerformed
        // Para la asignación, los datos que se necesitan y de donde se obtienen son:
        //   - El Grado se obtiene de 'listaGrados.get(grado.getSelectedIndex).getID()'
        //   - Se puede crear una Asignación sí y sólo si el Ciclo está Listo y no esté Cerrado
        //   Los ID's se obtienen como se mencionó.
        
        // Como el estudiante ya tiene una asignación anterior, obtengo el ID del ciclo anterior y del nuevo
        int idCicloAnterior = 0, idCicloNuevo = 0;
        String cicloAnterior = "", cicloNuevo = (String)ciclo_escolar.getSelectedItem();
        int cantidad = listaCiclos.size();
        for(int i=0; i<cantidad; i++) { // Busco el ID del Ciclo al que ya fue Asignado
            if (listaCiclos.get(i).getAnio().equals(estudiante.getAnio())) {
                idCicloAnterior = listaCiclos.get(i).getID();
                cicloAnterior = listaCiclos.get(i).getAnio();
                break;
            }
        }
        idCicloNuevo = listaCiclos.get(ciclo_escolar.getSelectedIndex()).getID();   // Obtengo el ID del Ciclo al que se quiere Asignar
        
        // Evalúo que la nueva Reasignación (de ser el caso) realmente no se haya realizado en otras ocasiones
        boolean yaExiste = false;
        if (paraReasignacion) {
            try {
                Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet cAsignacion = sentencia.executeQuery("SELECT Id, CicloEscolar_Id, Estudiante_Id FROM AsignacionEST "
                        + "INNER JOIN CicloEscolar ON AsignacionEST.CicloEscolar_Id = CicloEscolar.Id "
                        + "WHERE CicloEscolar_Id = "+idCicloNuevo+" AND Estudiante_Id = "+estudiante.getID()+"");
                yaExiste = cAsignacion.next();
                if (yaExiste)
                    cicloAnterior = cAsignacion.getString("Anio");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error al intentar comprobar la existencia de la Reasignación:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(AsignarEstudiante.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (idCicloAnterior == idCicloNuevo || yaExiste) {
            // Si se intenta Asignar al Estudiante a un Ciclo al que ya fue asignado
            JOptionPane.showMessageDialog(this,
                    ((estudiante.getSexo().equals("F"))?"La":"El")+" estudiante ya fue asignad"+((estudiante.getSexo().equals("F"))?"a":"o")+" en el Ciclo "+((yaExiste) ? cicloAnterior : cicloNuevo),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else if (paraReasignacion && idCicloNuevo < idCicloAnterior) {
            // Si se intenta Asignar al Estudiante a un Ciclo anterior al que ya fue asignado
            JOptionPane.showMessageDialog(this,
                    ((estudiante.getSexo().equals("F"))?"La":"El")+" estudiante no puede ser asignad"+((estudiante.getSexo().equals("F"))?"a":"o")+" al Ciclo "+cicloNuevo
                            + "\npues es anterior al Ciclo "+cicloAnterior+" al que ya fue asignad"+((estudiante.getSexo().equals("F"))?"a":"o."),
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {  // Se realizará la Asignación/Reasignación
            int opcion = JOptionPane.showOptionDialog(this,
                    "Se creará la "+((paraReasignacion)?"Rea":"A")+"signación de "+estudiante.getNombres()+" "+estudiante.getApellidos()+":"
                            + "\nCiclo:  "+cicloNuevo+""
                            + "\nGrado:  "+(String)grado.getSelectedItem()+""
                            + "\n\nEstá seguro que desea continuar?",
                    "Aviso", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (opcion == JOptionPane.YES_OPTION) {
                int indexCiclo = ciclo_escolar.getSelectedIndex(), indexGrado = grado.getSelectedIndex();
                try {
                    String nuevaAsignacion = "INSERT INTO AsignacionEst(CicloEscolar_Id, Grado_Id, Estudiante_Id) VALUES("
                            +idCicloNuevo+", "+listaCiclos.get(indexCiclo).getGrado(indexGrado).getID()+", "+estudiante.getID()+")";
                    conexion.prepareStatement(nuevaAsignacion).executeUpdate(); // Inserto y actulizo
                    estudiante.setAsignacionNueva(true);    // Actualizo el registro del estudiante para indicar que ya fue reasignado
                    // No es necesario bloquear botones pues se cierra el JDialog
                    this.dispose(); // Cierro el JDialog
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al intentar crear la Asignación:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//                    Logger.getLogger(AsignarEstudiante.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_crear_asignacionActionPerformed
    /**
     * Para evitar hacer una consulta a la Base de Datos cada vez que se cambia el item de este JComboBox, se cargarán los
     * datos a una estructura desde la cual se extraerá en caso de ya existir. Con ello, sólo se hará una petición a la BD
     * sólo cuando los grados no han sido cargados; de ya haber sido cargados, los obtiene del ArrayList que los contiene
     * @param evt 
     */
    private void gradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gradoItemStateChanged
        int indexGrado = grado.getSelectedIndex();
        if (ciclosCargados && indexGrado != -1) {
            modelCursos.setRowCount(0);
            int indexCiclo = ciclo_escolar.getSelectedIndex();
            // Obtengo el listado de Cursos del Ciclo Escolar y Grado seleccionados
            ArrayList<String> listaCursos = listaCiclos.get(indexCiclo).getGrado(indexGrado).getListaCursos();
            int cantidad = listaCursos.size();
            if (cantidad == 0) {    // Si no hay cursos, consulto la BD para obtener dichos cursos
                try {
                    // Obtengo los cursos asignados al Ciclo Escolar y Grado correspondientes
                    Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                    ResultSet cCursos = sentencia.executeQuery("SELECT CicloEscolar_Id, Grado_Id, Curso_Id, Curso.Nombre Curso FROM AsignacionCAT "
                            + "INNER JOIN Curso ON AsignacionCAT.Curso_Id = Curso.Id "
                            + "WHERE AsignacionCAT.CicloEscolar_Id = "+listaCiclos.get(indexCiclo).getID()+" AND Grado_Id = "+listaCiclos.get(indexCiclo).getGrado(indexGrado).getID());
                    while (cCursos.next())
                        listaCursos.add(cCursos.getString("Curso"));
                    // Agrego los Cursos del Grado y Ciclo Escolar seleccionados
                    listaCiclos.get(indexCiclo).getGrado(indexGrado).addCursos(listaCursos);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al mostrar los Cursos:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//                    Logger.getLogger(AsignarEstudiante.class.getName()).log(Level.SEVERE, null, ex);
                }
            }   // Hasta aquí, listaCursos contiene los Cursos asociados al Grado y Ciclo Escolar seleccionados
            cantidad = listaCursos.size();
            for(int i=0; i<cantidad; i++)
                modelCursos.addRow(new String[]{""+(i+1), listaCursos.get(i)});
        }
    }//GEN-LAST:event_gradoItemStateChanged
    /**
     * Método que define el ancho de las columnas de ambas tablas, en base a valores definidos previamente por pruebas.
     */
    private void definir_ancho_columnas() {
        // Definición del ancho de las columnas para la Tabla Información Estudiante (valores definidos en base a pruebas)
        tabla_info_estudiante.getColumnModel().getColumn(0).setPreferredWidth(110);
        tabla_info_estudiante.getColumnModel().getColumn(1).setPreferredWidth(120);
        tabla_info_estudiante.getColumnModel().getColumn(2).setPreferredWidth(195);
        tabla_info_estudiante.getColumnModel().getColumn(3).setPreferredWidth(120);
        tabla_info_estudiante.getColumnModel().getColumn(4).setPreferredWidth(100);
        tabla_info_estudiante.getColumnModel().getColumn(5).setPreferredWidth(85);
        
        // Definición del ancho de las columnas para la Tabla Información Cursos (valores definidos en base a pruebas)
        tabla_info_cursos.getColumnModel().getColumn(0).setPreferredWidth(50);
        tabla_info_cursos.getColumnModel().getColumn(1).setPreferredWidth(350);
    }
    public boolean getHacerVisible() { return hacerVisible; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AsignarEstudiante dialog = new AsignarEstudiante(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ciclo_escolar;
    private javax.swing.JButton crear_asignacion;
    private javax.swing.JLabel etiqueta_aviso;
    private javax.swing.JComboBox<String> grado;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel_info_asignacion;
    private javax.swing.JPanel panel_info_estudiante;
    private javax.swing.JTable tabla_info_cursos;
    private javax.swing.JTable tabla_info_estudiante;
    // End of variables declaration//GEN-END:variables
}
