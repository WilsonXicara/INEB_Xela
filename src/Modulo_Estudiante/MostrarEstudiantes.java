/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Estudiante;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Esta clase permite buscar información de uno o varios estudiantes (mostrando los que coincidan con la búsqueda en la
 * tabla correspondiente).
 * Permite visualizar información completa de los estudiantes, visualizar y modificar notas (en los ciclos escolares que lo
 * permitan) y ver el historial de asignaciones del estudiante seleccionado.
 * @author Wilson Xicará
 */
public class MostrarEstudiantes extends javax.swing.JFrame {
    private Connection conexion;
    private JFrame ventanaPadre;
    private ArrayList<Integer> listaIDCiclos, listaIDGrados, listaIDEstudiantes;
    private boolean hacerVisible, ciclosCargados;
    /**
     * Creates new form MostrarEstudiantes
     */
    public MostrarEstudiantes() {
        initComponents();
    }
    public MostrarEstudiantes(Connection conexion, JFrame ventanaPadre) {
        initComponents();
        this.conexion = conexion;
        this.ventanaPadre = ventanaPadre;
        hacerVisible = !(ciclosCargados = false);   // Inicialmente se mostrará la ventana, y no se han cargado datos
        
        // Realizo diferentes consultas a la Base de Datos, para obtener los datos que me servirán en esta ventana
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cCicloEscolar;
            // Obtengo los ID's de los Ciclos Escolares existentes
            cCicloEscolar = sentencia.executeQuery("SELECT Id, Anio FROM CicloEscolar");
            listaIDCiclos = new ArrayList<>();
            while(cCicloEscolar.next()) {   // Cargo al ArrayList y al JComboBox los Ciclos Escolares encontrados en la BD
                listaIDCiclos.add(cCicloEscolar.getInt("Id"));
                ciclo_escolar.addItem(cCicloEscolar.getString("Anio"));
            } ciclo_escolar.addItem("Sin Asignación");
            ciclosCargados = true;  // Hasta aquí se garantiza la carga de todos Ciclos Escolares de la Base de Datos
            // Otras configuraciones importantes
            ciclo_escolar.setSelectedIndex(-1); // Esta opción es para generar una llamada al itemStateChange en caso de sólo encontrar un ciclo
            ciclo_escolar.setSelectedIndex(ciclo_escolar.getItemCount() - 1);   // Selecciono por defecto la opción de 'Sin Asignación'
            listaIDGrados = new ArrayList<>();
            listaIDEstudiantes = new ArrayList<>();
            tabla_encontrados.setShowHorizontalLines(true); // Para mostrar los bordes de las celdas de la tabla
            tabla_encontrados.setShowVerticalLines(true);
            tabla_datos_estudiante.setShowHorizontalLines(true);
            tabla_datos_estudiante.setShowVerticalLines(true);
            tabla_datos_encargado.setShowHorizontalLines(true);
            tabla_datos_encargado.setShowVerticalLines(true);
            this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla
        } catch (SQLException ex) {
            hacerVisible = false;   // Si ocurriese un error, no se mostrará esta ventana
            JOptionPane.showMessageDialog(this, "Error al intentar obtener registros de la Base de Datos:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ventanaPadre.setEnabled(true);
            Logger.getLogger(MostrarEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
        }
        ventanaPadre.setEnabled(!hacerVisible); // Si no se mostrará esta ventana, habilito ventanaPadre para evitar que quede inhabilitada
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_filtro_busqueda = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ciclo_escolar = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        filtro_busqueda = new javax.swing.JComboBox<>();
        campo_busqueda = new javax.swing.JTextField();
        buscar_estudiantes = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        grado = new javax.swing.JComboBox<>();
        panel_encontrados = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_encontrados = new javax.swing.JTable();
        panel_datos_completos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabla_datos_estudiante = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabla_datos_encargado = new javax.swing.JTable();
        panel_botones = new javax.swing.JPanel();
        ver_notas = new javax.swing.JButton();
        ver_historial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Información de los Estudiantes");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panel_filtro_busqueda.setBackground(new java.awt.Color(153, 153, 255));
        panel_filtro_busqueda.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Especificación de búsqueda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        panel_filtro_busqueda.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Ciclo Escolar:");
        panel_filtro_busqueda.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 23, -1, -1));

        ciclo_escolar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ciclo_escolar.setEnabled(false);
        ciclo_escolar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ciclo_escolarItemStateChanged(evt);
            }
        });
        panel_filtro_busqueda.add(ciclo_escolar, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 19, 125, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Buscar por:");
        panel_filtro_busqueda.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 51, -1, -1));

        filtro_busqueda.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        filtro_busqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin especificar", "Código Personal", "Apellidos", "Nombres" }));
        filtro_busqueda.setEnabled(false);
        filtro_busqueda.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtro_busquedaItemStateChanged(evt);
            }
        });
        panel_filtro_busqueda.add(filtro_busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 48, 150, -1));

        campo_busqueda.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campo_busqueda.setText("Todos los registros");
        campo_busqueda.setEnabled(false);
        panel_filtro_busqueda.add(campo_busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 48, 250, -1));

        buscar_estudiantes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buscar_estudiantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit.png"))); // NOI18N
        buscar_estudiantes.setText("Nueva Búsqueda");
        buscar_estudiantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_estudiantesActionPerformed(evt);
            }
        });
        panel_filtro_busqueda.add(buscar_estudiantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 30, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Grado:");
        panel_filtro_busqueda.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 23, -1, -1));

        grado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        grado.setEnabled(false);
        panel_filtro_busqueda.add(grado, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 19, 150, -1));

        panel_encontrados.setBackground(new java.awt.Color(153, 153, 255));
        panel_encontrados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sin búsqueda", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabla_encontrados.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabla_encontrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Código Personal", "Nombres", "Apellidos", "Ciclo Escolar", "Grado y Sección"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_encontrados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_encontrados.setEnabled(false);
        tabla_encontrados.setRowHeight(25);
        tabla_encontrados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabla_encontrados.getTableHeader().setReorderingAllowed(false);
        tabla_encontrados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_encontradosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_encontrados);
        if (tabla_encontrados.getColumnModel().getColumnCount() > 0) {
            tabla_encontrados.getColumnModel().getColumn(0).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla_encontrados.getColumnModel().getColumn(1).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(1).setPreferredWidth(110);
            tabla_encontrados.getColumnModel().getColumn(2).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(2).setPreferredWidth(130);
            tabla_encontrados.getColumnModel().getColumn(3).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(3).setPreferredWidth(150);
            tabla_encontrados.getColumnModel().getColumn(4).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(4).setPreferredWidth(150);
            tabla_encontrados.getColumnModel().getColumn(5).setResizable(false);
            tabla_encontrados.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        javax.swing.GroupLayout panel_encontradosLayout = new javax.swing.GroupLayout(panel_encontrados);
        panel_encontrados.setLayout(panel_encontradosLayout);
        panel_encontradosLayout.setHorizontalGroup(
            panel_encontradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
        );
        panel_encontradosLayout.setVerticalGroup(
            panel_encontradosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
        );

        panel_datos_completos.setBackground(new java.awt.Color(153, 153, 255));
        panel_datos_completos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información completa:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Información del Esudiante:");

        tabla_datos_estudiante.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tabla_datos_estudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Cód. Personal:", ""},
                {"CUI:", ""},
                {"Nombres:", ""},
                {"Apellidos:", ""},
                {"Dirección:", ""},
                {"Municipio:", ""},
                {"Fecha nac.:", ""},
                {"Sexo:", ""},
                {"Etnia:", ""},
                {"Capacidad dif.:", ""},
                {"Tipo capacidad:", ""}
            },
            new String [] {
                "Campo", "Información"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_datos_estudiante.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tabla_datos_estudiante);
        if (tabla_datos_estudiante.getColumnModel().getColumnCount() > 0) {
            tabla_datos_estudiante.getColumnModel().getColumn(0).setPreferredWidth(105);
        }

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Información del Esudiante:");

        tabla_datos_encargado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tabla_datos_encargado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Relación:", ""},
                {"DPI:", ""},
                {"Nombres:", ""},
                {"Apellidos:", ""},
                {"Dirección:", ""},
                {"Municipio:", ""},
                {"Fecha nac.:", ""},
                {"Teléfono:", ""},
                {"Celular:", ""},
                {"Oficio:", null}
            },
            new String [] {
                "Campo", "Información"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_datos_encargado.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(tabla_datos_encargado);
        if (tabla_datos_encargado.getColumnModel().getColumnCount() > 0) {
            tabla_datos_encargado.getColumnModel().getColumn(0).setPreferredWidth(80);
        }

        javax.swing.GroupLayout panel_datos_completosLayout = new javax.swing.GroupLayout(panel_datos_completos);
        panel_datos_completos.setLayout(panel_datos_completosLayout);
        panel_datos_completosLayout.setHorizontalGroup(
            panel_datos_completosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panel_datos_completosLayout.setVerticalGroup(
            panel_datos_completosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_completosLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_botones.setBackground(new java.awt.Color(153, 153, 255));
        panel_botones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Acciones", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        ver_notas.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ver_notas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/nueva_ventana.png"))); // NOI18N
        ver_notas.setText("Ver Notas");
        ver_notas.setEnabled(false);
        ver_notas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ver_notasActionPerformed(evt);
            }
        });

        ver_historial.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ver_historial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reloj.png"))); // NOI18N
        ver_historial.setText("Ver HIstorial");
        ver_historial.setEnabled(false);
        ver_historial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ver_historialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_botonesLayout = new javax.swing.GroupLayout(panel_botones);
        panel_botones.setLayout(panel_botonesLayout);
        panel_botonesLayout.setHorizontalGroup(
            panel_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botonesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ver_historial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ver_notas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        panel_botonesLayout.setVerticalGroup(
            panel_botonesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botonesLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(ver_notas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ver_historial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_encontrados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_datos_completos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_botones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(panel_filtro_busqueda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_filtro_busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_encontrados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel_botones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panel_datos_completos, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento que controla la selección de ciclos escolares mostrados. Al seleccionar un Ciclo escolar existente se debe
     * actualizar los grados que pertenecen a dicho ciclo.
     * @param evt 
     */
    private void ciclo_escolarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ciclo_escolarItemStateChanged
        int indexCiclo = ciclo_escolar.getSelectedIndex();  // Obtengo el item seleccionado
        if (ciclosCargados && indexCiclo != -1) {
            grado.removeAllItems(); // Elimino los Grados de la búsqueda anterior
            if (indexCiclo == (ciclo_escolar.getItemCount()-1)) {   // Se eligió la opción de 'Sin Asignación'
                grado.setEnabled(false);    // No se puede seleccionar un grado (no existen)
                ver_notas.setEnabled(false);    // Aún no se tienen notas
                ver_historial.setEnabled(false);    // No tiene por lo menos una asignación
            } else {    // Se eligió un Ciclo Escolar ya creado
                grado.setEnabled(true);
                ver_notas.setEnabled(true);
                ver_historial.setEnabled(true);
                // Obtengo los Grados que pertenecen al Ciclo Escolar seleccionado y los agrego al JComboBox que corresponde
                listaIDGrados.clear();
                try {
                    ResultSet cGrados = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY)
                            .executeQuery("SELECT AsignacionCAT.Grado_Id idGrado, Grado.Nombre Grado, Grado.Seccion FROM AsignacionCAT "
                                    + "INNER JOIN Grado ON AsignacionCAT.Grado_Id = Grado.Id "
                                    + "WHERE AsignacionCAT.CicloEscolar_Id = "+listaIDCiclos.get(indexCiclo)+" "
                                    + "GROUP BY AsignacionCAT.Grado_Id");
                    while (cGrados.next()) {
                        listaIDGrados.add(cGrados.getInt("idGrado"));
                        grado.addItem(cGrados.getString("Grado")+" "+cGrados.getString("Seccion"));
                    } grado.addItem("Todos los grados");  // Opción que permitirá buscar a los estudiantes de todos los grados
                    int cantidad = grado.getItemCount();
                    grado.setSelectedIndex((cantidad == 0) ? -1 : 0);
                    buscar_estudiantes.setEnabled(cantidad != 0);   // Se pueden hacer búsquedas siempre que exista por lo menos un grado
                    // Hasta aquí se garantiza la carga de todos los grados
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error al intentar obtener los grados:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(MostrarEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_ciclo_escolarItemStateChanged

    private void filtro_busquedaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtro_busquedaItemStateChanged
        campo_busqueda.setEnabled(!(filtro_busqueda.getSelectedIndex() == 0));
        campo_busqueda.setText((filtro_busqueda.getSelectedIndex()==0) ? "Todos los registros" : "");
    }//GEN-LAST:event_filtro_busquedaItemStateChanged

    private void buscar_estudiantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_estudiantesActionPerformed
        if (buscar_estudiantes.getText().equals("Nueva Búsqueda")) {    // Se habilitan los campos para filtrar la búsqueda
            buscar_estudiantes.setText("Buscar");   // Indicador de que se filtrará la búsqueda y puede realizarse la misma
            buscar_estudiantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png")));
            setEnabled_campos_resultado(false);
        } else {    // Ya se han seleccionado el filtro de búsqueda
            // En caso de que se quiera buscar algún campo en específico, pero no se ha especificado dicho campo
            if (filtro_busqueda.getSelectedIndex() != 0 && campo_busqueda.getText().length() == 0)
                JOptionPane.showMessageDialog(this, "Especifique el campo a buscar", "Error en datos", JOptionPane.ERROR_MESSAGE);
            else {
                setEnabled_campos_resultado(true);
                extraer_y_mostrar_registros();
                
                buscar_estudiantes.setText("Nueva Búsqueda");   // Indicador de que se habilitará el filtro para una nueva búsqueda
                buscar_estudiantes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit.png")));
                
                ver_notas.setEnabled(tabla_encontrados.getRowCount() > 0 && ciclo_escolar.getSelectedIndex()!=(ciclo_escolar.getItemCount()-1));
                ver_historial.setEnabled(tabla_encontrados.getRowCount() > 0 && ciclo_escolar.getSelectedIndex()!=(ciclo_escolar.getItemCount()-1));
            }
        }
        cargar_datos_completos_en_campos(-1);   // En cualquier caso, limpio los campos de vista de información completa
    }//GEN-LAST:event_buscar_estudiantesActionPerformed

    private void ver_notasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_notasActionPerformed
        // La tabla tiene la propiedad de que sólo se puede seleccionar una fila a la vez
        int indexSelec = tabla_encontrados.getSelectedRow();
        if (indexSelec == -1)
            JOptionPane.showMessageDialog(this, "No ha seleccione un registro", "Aviso", JOptionPane.WARNING_MESSAGE);
        else {  // Instanciación de la ventana encargada de la Visualización de las NotasPorEstudiante asociadas al Estudiante y al Ciclo Escolar
            this.setVisible(false);
            NotasPorEstudiante ventanaNotas = new NotasPorEstudiante(this, conexion, listaIDCiclos.get(ciclo_escolar.getSelectedIndex()), listaIDEstudiantes.get(indexSelec));
            ventanaNotas.setVisible(ventanaNotas.getHacerVisible());
            this.setVisible(true);
        }
    }//GEN-LAST:event_ver_notasActionPerformed

    private void ver_historialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ver_historialActionPerformed
        // La tabla tiene la propiedad de que sólo se puede seleccionar una fila a la vez
        int indexSelec = tabla_encontrados.getSelectedRow();
        if (indexSelec == -1)
            JOptionPane.showMessageDialog(this, "No ha seleccione un registro", "Aviso", JOptionPane.WARNING_MESSAGE);
        else {  // Instanciación de la ventana encargada de la Visualización de las NotasPorEstudiante asociadas al Estudiante y al Ciclo Escolar
            this.setVisible(false);
            Historial ventanaHistorial = new Historial(this, conexion, listaIDEstudiantes.get(indexSelec));
            ventanaHistorial.setVisible(ventanaHistorial.getHacerVisible());
            this.setVisible(true);
        }
    }//GEN-LAST:event_ver_historialActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        ventanaPadre.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing
    /**
     * Evento que se activa cuando se da clic sobre uno de los registros de la Tabla. Se cargarán los datos completos del
     * Estudiante seleccionado. La tabla tiene la propiedad de que sólo se puede seleccionar una fila a la vez.
     * @param evt 
     */
    private void tabla_encontradosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_encontradosMousePressed
        cargar_datos_completos_en_campos(tabla_encontrados.getSelectedRow());
    }//GEN-LAST:event_tabla_encontradosMousePressed

    private void cargar_datos_completos_en_campos(int indexEstudiante) {
        if (indexEstudiante == -1) {    // Limpio la columna 2 de las tablas datos_estudiante y datos_encargado
            int contFil = tabla_datos_estudiante.getRowCount();
            for(int i=0; i<contFil; i++)
                tabla_datos_estudiante.setValueAt("", i, 1);
            contFil = tabla_datos_encargado.getRowCount();
            for(int i=0; i<contFil; i++)
                tabla_datos_encargado.setValueAt("", i, 1);
        } else {    // Los datos faltantes los obtengo de la Base de Datos
            tabla_datos_estudiante.setValueAt((String)tabla_encontrados.getValueAt(indexEstudiante, 1), 0, 1);  // Código Personal
            tabla_datos_estudiante.setValueAt((String)tabla_encontrados.getValueAt(indexEstudiante, 2), 2, 1);  // Nombres
            tabla_datos_estudiante.setValueAt((String)tabla_encontrados.getValueAt(indexEstudiante, 3), 3, 1);  // Apellidos
            try {
                Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet cConsulta;
                // Obtención de la información faltante del Estdiante
                cConsulta = sentencia.executeQuery("SELECT Estudiante.CUI, Estudiante.Direccion, Municipio.Nombre Municipio, Estudiante.FechaNacimiento, Estudiante.Sexo, Estudiante.Etnia, Estudiante.CapacidadDiferente, Estudiante.TipoCapacidad, Estudiante.RelacionEncargado FROM Estudiante "
                        + "INNER JOIN Municipio ON Estudiante.Municipio_Id = Municipio.Id "
                        + "WHERE Estudiante.Id = "+listaIDEstudiantes.get(indexEstudiante));
                cConsulta.next();
                tabla_datos_estudiante.setValueAt(cConsulta.getString("CUI"), 1, 1);
                tabla_datos_estudiante.setValueAt(cConsulta.getString("Direccion"), 4, 1);
                tabla_datos_estudiante.setValueAt(cConsulta.getString("Municipio"), 5, 1);
                String[] fechaNac = cConsulta.getString("FechaNacimiento").split("-");
                tabla_datos_estudiante.setValueAt(fechaNac[2]+"/"+fechaNac[1]+"/"+fechaNac[0], 6, 1);
                tabla_datos_estudiante.setValueAt("M".equals(cConsulta.getString("Sexo")) ? "Masculino" : "Femenino", 7, 1);
                tabla_datos_estudiante.setValueAt(cConsulta.getString("Etnia"), 8, 1);
                tabla_datos_estudiante.setValueAt(cConsulta.getBoolean("CapacidadDiferente") ? "Si" : "No", 9, 1);
                tabla_datos_estudiante.setValueAt(cConsulta.getBoolean("CapacidadDiferente") ? cConsulta.getString("TipoCapacidad") : "", 10, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("RelacionEncargado"), 0, 1);
                // Obtención de la información del Encargado
                cConsulta = sentencia.executeQuery("SELECT Encargado.Id idEnc, Encargado.DPI, Encargado.Nombres, Encargado.Apellidos, Encargado.Direccion, Municipio.Nombre Municipio, Encargado.FechaNacimiento, Encargado.Trabajo FROM Encargado "
                        + "INNER JOIN Estudiante ON Encargado.Id = Estudiante.Encargado_Id "
                        + "INNER JOIN Municipio ON Encargado.Municipio_Id = Municipio.Id "
                        + "WHERE Estudiante.Id = "+listaIDEstudiantes.get(indexEstudiante));
                cConsulta.next();
                tabla_datos_encargado.setValueAt(cConsulta.getString("DPI"), 1, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("Nombres"), 2, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("Apellidos"), 3, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("Direccion"), 4, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("Municipio"), 5, 1);
                fechaNac = cConsulta.getString("FechaNacimiento").split("-");
                tabla_datos_encargado.setValueAt(fechaNac[2]+"/"+fechaNac[1]+"/"+fechaNac[0], 6, 1);
                tabla_datos_encargado.setValueAt(cConsulta.getString("Trabajo"), 9, 1);
                cConsulta = sentencia.executeQuery("SELECT Telefono FROM Telefono WHERE Encargado_Id = "+cConsulta.getInt("idEnc"));
                tabla_datos_encargado.setValueAt(cConsulta.next() ? cConsulta.getString(1) : "", 7, 1); // Teléfono
                tabla_datos_encargado.setValueAt(cConsulta.next() ? cConsulta.getString(1) : "", 8, 1); // Celular
            } catch (SQLException ex) {
                Logger.getLogger(MostrarEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }            
    }
    /**APROBADO!!!
     * Método que permite habilitar e inhabilitar campos dentro de la ventana. Esta opción es útil a la hora de hacer una
     * 'Búsqueda' o de seleccionar una 'Nueva Búsqueda'. Al realizar una búsqueda y obtener resultados es necesario que la
     * parte de filtro de búsqueda esté deshabilitado para evitar confusión.
     * @param valorEnabled valor que se le asigna al .setEnabled() de los componentes adecuados.
     */
    private void setEnabled_campos_resultado(boolean valorEnabled) {
        int ultimoCicloSeleccionado = ciclo_escolar.getSelectedIndex();
        ciclo_escolar.setSelectedIndex(-1);
        ciclo_escolar.setSelectedIndex(ultimoCicloSeleccionado);
        ciclo_escolar.setEnabled(!valorEnabled);
        grado.setEnabled(!valorEnabled);
        // El JComboBox grado se habilita o inhabilita mediante el cambio de Item en ciclo_escolar
        filtro_busqueda.setEnabled(!valorEnabled);
        if (!valorEnabled) filtro_busqueda.setSelectedIndex(0);
        else campo_busqueda.setEnabled(!valorEnabled);
        
        tabla_encontrados.setEnabled(valorEnabled);
        ver_notas.setEnabled(valorEnabled);
        ver_historial.setEnabled(valorEnabled);
    }
    /**APROBADO!!!
     * Método que busca los registros en la BD, que coinciden con las especificaciones de la búsqueda. Sólo obtiene la
     * información básica requerida en la tabla, así como el ID de los estudiantes mostrados
     */
    private void extraer_y_mostrar_registros() {
        listaIDEstudiantes.clear();   // Eliminación de todos los registros de listaEstudiantes
        int cicloSelec = ciclo_escolar.getSelectedIndex(), gradoSelec = grado.getSelectedIndex(), filtro = filtro_busqueda.getSelectedIndex();
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            String instruccion;
            if (cicloSelec == (ciclo_escolar.getItemCount()-1))    // Si se ha seleccionado la opción de 'Sin Asignación'
                instruccion = "SELECT Estudiante.Id idEstudiante, Estudiante.CodigoPersonal, Estudiante.Nombres, Estudiante.Apellidos, 'Sin Asignación' GradoSeccion FROM Estudiante "
                        + "LEFT JOIN AsignacionEST ON Estudiante.Id = AsignacionEST.Estudiante_Id "
                        + "WHERE AsignacionEst.Id IS NULL";
            else {  // Si se ha seleccionado uno de los Ciclos escolares existentes
                instruccion = "SELECT Estudiante.Id idEstudiante, Estudiante.CodigoPersonal, Estudiante.Nombres, Estudiante.Apellidos, CONCAT(Grado.Nombre, ' ', Grado.Seccion) GradoSeccion FROM CicloEscolar "
                        + "INNER JOIN AsignacionEST ON CicloEscolar.Id = AsignacionEST.CicloEscolar_Id "
                        + "INNER JOIN Grado ON AsignacionEST.Grado_Id = Grado.Id "
                        + "INNER JOIN Estudiante ON AsignacionEST.Estudiante_Id = Estudiante.Id "
                        + "WHERE CicloEscolar.Id = "+listaIDCiclos.get(cicloSelec);
                if (gradoSelec != -1 && gradoSelec != (grado.getItemCount()-1))   // Si se ha seleccionado un Grado
                    instruccion+= " AND Grado_Id = "+listaIDGrados.get(gradoSelec);
            }   // Hasta aquí ya se construyó la instrucción para obtener los datos de los Estudiantes
            // Realizo la búsqueda según el filtro, el Ciclo Escolar y el Grado especificados
            switch (filtro) {
                case 1: // Búsqueda por Código Personal
                    instruccion+= " AND CodigoPersonal = '"+campo_busqueda.getText()+ "'";
                break;
                case 2: // Búsqueda por Apellidos
                    instruccion+= " AND Apellidos = '"+campo_busqueda.getText()+ "'";
                break;
                case 3: // Búsqueda por Nombres
                    instruccion+= " AND Nombres = '"+campo_busqueda.getText()+ "'";
                break;
                default:    // Sin especificar (devuelve todos los datos del CicloEscolar especificado)
                break;
            }
            ResultSet cEncontrados = sentencia.executeQuery(instruccion);
            // Hasta aquí, 'encontrados' contiene los resultados de la búsqueda según las especificaciones
            
            // Carga de los Estudiantes que concuerdan con las especificaciones de la búsqueda
            DefaultTableModel modelEncontrados = (DefaultTableModel)tabla_encontrados.getModel();
            modelEncontrados.setRowCount(0);    // Elimino los registros de la búsqueda anterior
            int cont = 0;
            while(cEncontrados.next()) {
                listaIDEstudiantes.add(cEncontrados.getInt("idEstudiante"));
                modelEncontrados.addRow(new String[]{
                    ""+(++cont),
                    cEncontrados.getString("CodigoPersonal"),
                    cEncontrados.getString("Nombres"),
                    cEncontrados.getString("Apellidos"),
                    (String)ciclo_escolar.getSelectedItem(),
                    cEncontrados.getString("GradoSeccion")
                });
            }   // Hasta aquí se garantiza la búsqueda y muestra de datos según las especificaciones
            String mensaje = "Se encontró "+cont+" registro"+((cont!=1)?"s":"")+".";
            panel_encontrados.setBorder(javax.swing.BorderFactory.createTitledBorder(null, mensaje, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al intentar extraer los datos especificados:\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MostrarEstudiantes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public boolean getHacerVisible() { return hacerVisible; }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MostrarEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MostrarEstudiantes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar_estudiantes;
    private javax.swing.JTextField campo_busqueda;
    private javax.swing.JComboBox<String> ciclo_escolar;
    private javax.swing.JComboBox<String> filtro_busqueda;
    private javax.swing.JComboBox<String> grado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel panel_botones;
    private javax.swing.JPanel panel_datos_completos;
    private javax.swing.JPanel panel_encontrados;
    private javax.swing.JPanel panel_filtro_busqueda;
    private javax.swing.JTable tabla_datos_encargado;
    private javax.swing.JTable tabla_datos_estudiante;
    private javax.swing.JTable tabla_encontrados;
    private javax.swing.JButton ver_historial;
    private javax.swing.JButton ver_notas;
    // End of variables declaration//GEN-END:variables
}
