/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Estudiante;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wilson Xicará
 */
public class CrearEstudiante extends javax.swing.JFrame {
    private Connection conexion;
    private JFrame ventanaPadre;
    private boolean hacerVisible;
    private int indexEstudianteEditado, idEncargadoAsignado;
    private ArrayList<RegEstudiante> listaEstudiantes;
    private ArrayList<Integer> listaIDEncargadosRecientes, listaIDMunicipios;
    /**
     * Creates new form CrearEstudiantes
     */
    public CrearEstudiante() {
        initComponents();
    }
    /**
     * Inicializa la ventana con los campos requeridos para crear un nuevo Estudiante y agregarlo a la BD. Dicho proceso
     * también conlleva la creación (de ser necesario) y asignación de un Encargado al Estudiante.
     * @param conexion objeto que permite la conexión con la Base de Datos.
     * @param ventanaPadre ventana desde la cual se llama a ésta ventana (al llamar a esta ventana 'ventanaPadre' se inhabilita
     * por lo que al cerrar ésta ventana se debe de habilitar 'ventanaPadre').
     */
    public CrearEstudiante(Connection conexion, JFrame ventanaPadre) {
        initComponents();
        this.conexion = conexion;
        this.ventanaPadre = ventanaPadre;
        hacerVisible = true;
        
        // Obtengo los datos necesarios, desde la Base de Datos
        try {
            Statement sentencia = this.conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cConsulta;
            // Obtengo la Cantidad de Ciclos Escolares existentes en la BD
            cConsulta = sentencia.executeQuery("SELECT COUNT(Id) FROM CicloEscolar");
            cConsulta.next();
            if (cConsulta.getInt(1) == 0)
                JOptionPane.showMessageDialog(this, "Aún no se ha creado algún Ciclo Escolar.\n\nPuede crear registros de nuevos estudiantes, pero no podrá realizar Asignaciones.\nConsulte con el Administrador para más información.", "Aviso", JOptionPane.WARNING_MESSAGE);
            // Obtengo todos los Municipios
            cConsulta = sentencia.executeQuery("SELECT * FROM Municipio"); 
            listaIDMunicipios = new ArrayList<>();
            while(cConsulta.next()) {
                listaIDMunicipios.add(cConsulta.getInt("Id"));
                estudiante_municipio.addItem(cConsulta.getString("Nombre"));
            }
            // Otras configuraciones importantes
            listaEstudiantes = new ArrayList<>();
            listaIDEncargadosRecientes = new ArrayList<>();
            estudiante_fechaNacimiento.getJCalendar().setWeekOfYearVisible(false);  // Para no mostrar el número de semana en el Calendario
            guardar_fila_editada.setVisible(false);     // Oculto estos botones (se mostrarán en la edición de datos)
            cancelar_edicion.setVisible(false);
            tabla_estudiantes.setShowHorizontalLines(true); // Para mostrar los bordes de las celdas de la tabla
            tabla_estudiantes.setShowVerticalLines(true);
            this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla
        } catch (SQLException ex) {
            hacerVisible = false;
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar obtener algunos datos.\n\nDescripción:\n"+ex.getMessage(), "Error de conexión", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
        ventanaPadre.setEnabled(!hacerVisible); // Si no se mostrará esta ventana, habilito ventanaPadre para evitar que quede inhabilitada
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_datos_estudiante = new javax.swing.JPanel();
        panel_datos_principales_estudiante = new javax.swing.JPanel();
        estudiante_codigo_personal = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        estudiante_cui = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        estudiante_nombres = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        estudiante_apellidos = new javax.swing.JTextField();
        buscar_codigoPersonal_estudiante = new javax.swing.JButton();
        panel_datos_secundarios_estudiante = new javax.swing.JPanel();
        estudiante_direccion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        estudiante_municipio = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        estudiante_fechaNacimiento = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        estudiante_etnia = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        estudiante_tipo_capacidad = new javax.swing.JTextField();
        estudiante_sexo_masculino = new javax.swing.JRadioButton();
        estudiante_sexo_femenino = new javax.swing.JRadioButton();
        estudiante_capacidad_diferente = new javax.swing.JRadioButton();
        panel_datos_encargado = new javax.swing.JPanel();
        estudiante_asignar_encargado = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        encargado_nombre_completo = new javax.swing.JTextField();
        encargado_relacion_con_estudiante = new javax.swing.JTextField();
        panel_botones_estudiante = new javax.swing.JPanel();
        agregar_fila_estudiante = new javax.swing.JButton();
        cancelar_edicion = new javax.swing.JButton();
        guardar_fila_editada = new javax.swing.JButton();
        panel_lista_estudiantes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_estudiantes = new javax.swing.JTable();
        panel_botones_estudiante1 = new javax.swing.JPanel();
        editar_fila_estudiante = new javax.swing.JButton();
        eliminar_fila_estudiante = new javax.swing.JButton();
        etiqueta_registro_no_editable = new javax.swing.JLabel();
        panel_boton_guardar_todo = new javax.swing.JPanel();
        guardar_todos_los_registros = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Crear nuevo Estudiante");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panel_datos_estudiante.setBackground(new java.awt.Color(153, 153, 255));
        panel_datos_estudiante.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del nuevo Estudiante", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        panel_datos_principales_estudiante.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        estudiante_codigo_personal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_codigo_personal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                estudiante_codigo_personalKeyTyped(evt);
            }
        });
        panel_datos_principales_estudiante.add(estudiante_codigo_personal, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 3, 100, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("Codigo Personal:");
        panel_datos_principales_estudiante.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 6, -1, -1));

        estudiante_cui.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_cui.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                estudiante_cuiKeyTyped(evt);
            }
        });
        panel_datos_principales_estudiante.add(estudiante_cui, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 3, 150, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setText("CUI:");
        panel_datos_principales_estudiante.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 6, -1, -1));

        estudiante_nombres.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        panel_datos_principales_estudiante.add(estudiante_nombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 175, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel3.setText("Nombres:");
        panel_datos_principales_estudiante.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 33, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("Apellidos:");
        panel_datos_principales_estudiante.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 33, -1, -1));

        estudiante_apellidos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        panel_datos_principales_estudiante.add(estudiante_apellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(309, 30, 175, -1));

        buscar_codigoPersonal_estudiante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buscar_codigoPersonal_estudiante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png"))); // NOI18N
        buscar_codigoPersonal_estudiante.setText("Buscar coincidencias");
        buscar_codigoPersonal_estudiante.setIconTextGap(5);
        buscar_codigoPersonal_estudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_codigoPersonal_estudianteActionPerformed(evt);
            }
        });
        panel_datos_principales_estudiante.add(buscar_codigoPersonal_estudiante, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 57, -1, 45));

        panel_datos_secundarios_estudiante.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        estudiante_direccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_direccion.setEnabled(false);
        panel_datos_secundarios_estudiante.add(estudiante_direccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 3, 300, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Dirección:");
        panel_datos_secundarios_estudiante.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(77, 8, -1, -1));

        estudiante_municipio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_municipio.setEnabled(false);
        panel_datos_secundarios_estudiante.add(estudiante_municipio, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 30, 225, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel11.setText("Municipio:");
        panel_datos_secundarios_estudiante.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 35, -1, -1));

        estudiante_fechaNacimiento.setDateFormatString("yyyy-MM-dd");
        estudiante_fechaNacimiento.setEnabled(false);
        estudiante_fechaNacimiento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        panel_datos_secundarios_estudiante.add(estudiante_fechaNacimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 56, 150, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setText("Fecha de Nacimiento:");
        panel_datos_secundarios_estudiante.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 61, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel7.setText("Sexo:");
        panel_datos_secundarios_estudiante.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 88, -1, -1));

        estudiante_etnia.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_etnia.setEnabled(false);
        panel_datos_secundarios_estudiante.add(estudiante_etnia, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 107, 125, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel8.setText("Comunidad étnica:");
        panel_datos_secundarios_estudiante.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 112, -1, -1));

        estudiante_tipo_capacidad.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_tipo_capacidad.setText("Sin especificar");
        estudiante_tipo_capacidad.setEnabled(false);
        panel_datos_secundarios_estudiante.add(estudiante_tipo_capacidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 133, 300, -1));

        estudiante_sexo_masculino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_sexo_masculino.setSelected(true);
        estudiante_sexo_masculino.setText("Masculino");
        estudiante_sexo_masculino.setEnabled(false);
        estudiante_sexo_masculino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estudiante_sexo_masculinoItemStateChanged(evt);
            }
        });
        panel_datos_secundarios_estudiante.add(estudiante_sexo_masculino, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 85, -1, -1));

        estudiante_sexo_femenino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_sexo_femenino.setText("Femenino");
        estudiante_sexo_femenino.setEnabled(false);
        estudiante_sexo_femenino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estudiante_sexo_femeninoItemStateChanged(evt);
            }
        });
        panel_datos_secundarios_estudiante.add(estudiante_sexo_femenino, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 85, -1, -1));

        estudiante_capacidad_diferente.setText("Capacidad diferente");
        estudiante_capacidad_diferente.setEnabled(false);
        estudiante_capacidad_diferente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                estudiante_capacidad_diferenteItemStateChanged(evt);
            }
        });
        panel_datos_secundarios_estudiante.add(estudiante_capacidad_diferente, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 137, -1, -1));

        panel_datos_encargado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Información del Encargado", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        panel_datos_encargado.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        estudiante_asignar_encargado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        estudiante_asignar_encargado.setText("Asignar encargado");
        estudiante_asignar_encargado.setEnabled(false);
        estudiante_asignar_encargado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estudiante_asignar_encargadoActionPerformed(evt);
            }
        });
        panel_datos_encargado.add(estudiante_asignar_encargado, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 20, -1, 30));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel9.setText("Nombre Completo:");
        panel_datos_encargado.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 55, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel10.setText("Relación con el estudiante:");
        panel_datos_encargado.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 81, -1, -1));

        encargado_nombre_completo.setEditable(false);
        encargado_nombre_completo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        encargado_nombre_completo.setEnabled(false);
        panel_datos_encargado.add(encargado_nombre_completo, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 52, 250, -1));

        encargado_relacion_con_estudiante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        encargado_relacion_con_estudiante.setEnabled(false);
        panel_datos_encargado.add(encargado_relacion_con_estudiante, new org.netbeans.lib.awtextra.AbsoluteConstraints(174, 78, 150, -1));

        panel_botones_estudiante.setBackground(new java.awt.Color(51, 51, 255));

        agregar_fila_estudiante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        agregar_fila_estudiante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar.png"))); // NOI18N
        agregar_fila_estudiante.setText("Agregar");
        agregar_fila_estudiante.setEnabled(false);
        agregar_fila_estudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_fila_estudianteActionPerformed(evt);
            }
        });

        cancelar_edicion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancelar_edicion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        cancelar_edicion.setText("Cancelar");
        cancelar_edicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar_edicionActionPerformed(evt);
            }
        });

        guardar_fila_editada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        guardar_fila_editada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ok.png"))); // NOI18N
        guardar_fila_editada.setText("Guardar");
        guardar_fila_editada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_fila_editadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_botones_estudianteLayout = new javax.swing.GroupLayout(panel_botones_estudiante);
        panel_botones_estudiante.setLayout(panel_botones_estudianteLayout);
        panel_botones_estudianteLayout.setHorizontalGroup(
            panel_botones_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botones_estudianteLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(agregar_fila_estudiante)
                .addGap(6, 6, 6)
                .addComponent(guardar_fila_editada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelar_edicion)
                .addContainerGap())
        );
        panel_botones_estudianteLayout.setVerticalGroup(
            panel_botones_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botones_estudianteLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(panel_botones_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agregar_fila_estudiante)
                    .addGroup(panel_botones_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(guardar_fila_editada, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cancelar_edicion, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_datos_estudianteLayout = new javax.swing.GroupLayout(panel_datos_estudiante);
        panel_datos_estudiante.setLayout(panel_datos_estudianteLayout);
        panel_datos_estudianteLayout.setHorizontalGroup(
            panel_datos_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_datos_secundarios_estudiante, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_datos_principales_estudiante, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_datos_encargado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_datos_estudianteLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panel_botones_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panel_datos_estudianteLayout.setVerticalGroup(
            panel_datos_estudianteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_estudianteLayout.createSequentialGroup()
                .addComponent(panel_datos_principales_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_datos_secundarios_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_datos_encargado, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_botones_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_lista_estudiantes.setBackground(new java.awt.Color(153, 153, 255));
        panel_lista_estudiantes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estudiantes agregados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        tabla_estudiantes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tabla_estudiantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Código Personal", "CUI", "Nombres", "Apellidos", "Dirección", "Municipio", "Fecha Nacimiento", "Sexo", "Comunidad Étnica", "Capacidad Diferente", "Tipo Capacidad", "Encargado", "Relacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_estudiantes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabla_estudiantes.setRowHeight(25);
        tabla_estudiantes.getTableHeader().setReorderingAllowed(false);
        tabla_estudiantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabla_estudiantesMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_estudiantes);
        if (tabla_estudiantes.getColumnModel().getColumnCount() > 0) {
            tabla_estudiantes.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla_estudiantes.getColumnModel().getColumn(1).setPreferredWidth(110);
            tabla_estudiantes.getColumnModel().getColumn(2).setPreferredWidth(120);
            tabla_estudiantes.getColumnModel().getColumn(3).setPreferredWidth(140);
            tabla_estudiantes.getColumnModel().getColumn(4).setPreferredWidth(125);
            tabla_estudiantes.getColumnModel().getColumn(5).setPreferredWidth(200);
            tabla_estudiantes.getColumnModel().getColumn(6).setPreferredWidth(180);
            tabla_estudiantes.getColumnModel().getColumn(7).setPreferredWidth(115);
            tabla_estudiantes.getColumnModel().getColumn(8).setPreferredWidth(75);
            tabla_estudiantes.getColumnModel().getColumn(9).setPreferredWidth(115);
            tabla_estudiantes.getColumnModel().getColumn(10).setPreferredWidth(125);
            tabla_estudiantes.getColumnModel().getColumn(11).setPreferredWidth(200);
            tabla_estudiantes.getColumnModel().getColumn(12).setPreferredWidth(200);
            tabla_estudiantes.getColumnModel().getColumn(13).setPreferredWidth(85);
        }

        panel_botones_estudiante1.setBackground(new java.awt.Color(51, 51, 255));

        editar_fila_estudiante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editar_fila_estudiante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/edit.png"))); // NOI18N
        editar_fila_estudiante.setText("Editar");
        editar_fila_estudiante.setEnabled(false);
        editar_fila_estudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editar_fila_estudianteActionPerformed(evt);
            }
        });

        eliminar_fila_estudiante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        eliminar_fila_estudiante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png"))); // NOI18N
        eliminar_fila_estudiante.setText("Quitar");
        eliminar_fila_estudiante.setEnabled(false);
        eliminar_fila_estudiante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminar_fila_estudianteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_botones_estudiante1Layout = new javax.swing.GroupLayout(panel_botones_estudiante1);
        panel_botones_estudiante1.setLayout(panel_botones_estudiante1Layout);
        panel_botones_estudiante1Layout.setHorizontalGroup(
            panel_botones_estudiante1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botones_estudiante1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(editar_fila_estudiante)
                .addGap(6, 6, 6)
                .addComponent(eliminar_fila_estudiante)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_botones_estudiante1Layout.setVerticalGroup(
            panel_botones_estudiante1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_botones_estudiante1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(panel_botones_estudiante1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editar_fila_estudiante)
                    .addComponent(eliminar_fila_estudiante))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        etiqueta_registro_no_editable.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        javax.swing.GroupLayout panel_lista_estudiantesLayout = new javax.swing.GroupLayout(panel_lista_estudiantes);
        panel_lista_estudiantes.setLayout(panel_lista_estudiantesLayout);
        panel_lista_estudiantesLayout.setHorizontalGroup(
            panel_lista_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_lista_estudiantesLayout.createSequentialGroup()
                .addComponent(etiqueta_registro_no_editable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 244, Short.MAX_VALUE)
                .addComponent(panel_botones_estudiante1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );
        panel_lista_estudiantesLayout.setVerticalGroup(
            panel_lista_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_lista_estudiantesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_lista_estudiantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_botones_estudiante1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_lista_estudiantesLayout.createSequentialGroup()
                        .addComponent(etiqueta_registro_no_editable)
                        .addContainerGap())))
        );

        panel_boton_guardar_todo.setBackground(new java.awt.Color(153, 153, 255));

        guardar_todos_los_registros.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        guardar_todos_los_registros.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar.png"))); // NOI18N
        guardar_todos_los_registros.setText("Guardar todos los registros");
        guardar_todos_los_registros.setEnabled(false);
        guardar_todos_los_registros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_todos_los_registrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_boton_guardar_todoLayout = new javax.swing.GroupLayout(panel_boton_guardar_todo);
        panel_boton_guardar_todo.setLayout(panel_boton_guardar_todoLayout);
        panel_boton_guardar_todoLayout.setHorizontalGroup(
            panel_boton_guardar_todoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_boton_guardar_todoLayout.createSequentialGroup()
                .addContainerGap(384, Short.MAX_VALUE)
                .addComponent(guardar_todos_los_registros)
                .addGap(303, 303, 303))
        );
        panel_boton_guardar_todoLayout.setVerticalGroup(
            panel_boton_guardar_todoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_boton_guardar_todoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guardar_todos_los_registros)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel_datos_estudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_lista_estudiantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(panel_boton_guardar_todo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_lista_estudiantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_datos_estudiante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_boton_guardar_todo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Acción que permitirá agregar un nuevo registro temporalmente a la tabla de estudiantes. Para ello, se asume que ya se
     * ha evaluado si existen coincidencias y ya se ha confirmado al respecto. Previo a la inserción, evalúa en la tabla de
     * estudiantes si el registro aún no existe (pues la búsqueda de 'validar_datos_estudiante()' se realiza en la Base de Datos).
     * @param evt 
     */
    private void agregar_fila_estudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_fila_estudianteActionPerformed
        // Previo a la inserción, evalúo que los datos sean correctos y de que no estén en la tabla de estudiantes
        try {
            validar_datos_estudiante(false);
            // Realizo una búsqueda en la tabla de estudiantes en busca de algún registro igual
            String codigoPersonal = estudiante_codigo_personal.getText(), cui = estudiante_cui.getText(),
                    nombres = estudiante_nombres.getText(), apellidos = estudiante_apellidos.getText();
            int contFilas = tabla_estudiantes.getRowCount(), cont;
            for(cont=0; cont<contFilas; cont++) {
                if (codigoPersonal.equals((String)tabla_estudiantes.getValueAt(cont, 1)) &&
                    cui.equals((String)tabla_estudiantes.getValueAt(cont, 2)) &&
                    nombres.equals((String)tabla_estudiantes.getValueAt(cont, 3)) &&
                    apellidos.equals((String)tabla_estudiantes.getValueAt(cont, 4)))
                    break;  // Si algún registro tiene el mismo código personal, cui, nombres y apellidos
            }
            if (cont != contFilas) {    // Si se llegó al final del ciclo sin ninguna coincidencia, cont == contFilas
                JOptionPane.showMessageDialog(this, "El nuevo registro coincide con el\nregistro de la fila "+(cont+1)+"de la tabla\\n\\nNo se puede guardar el nuevo registro", "Datos repetidos", JOptionPane.ERROR_MESSAGE);
                tabla_estudiantes.setRowSelectionInterval(cont, cont);
            } else {    // Se creará el nuevo registro. Los datos se cargarán a la tabla como temporales
                DefaultTableModel modelEstudiantes = (DefaultTableModel)tabla_estudiantes.getModel();
                Calendar fechaNac = estudiante_fechaNacimiento.getCalendar();
                modelEstudiantes.addRow(new String[]{   // Agregación de datos a la Tabla
                    ""+(tabla_estudiantes.getRowCount()+1),
                    codigoPersonal,
                    cui,
                    nombres,
                    apellidos,
                    estudiante_direccion.getText(),
                    (String)estudiante_municipio.getSelectedItem(),
                    ""+fechaNac.get(Calendar.DAY_OF_MONTH)+"/"+(fechaNac.get(Calendar.MONTH)+1)+"/"+fechaNac.get(Calendar.YEAR),
                    (estudiante_sexo_masculino.isSelected() ? "Masculino" : "Femenino"),
                    estudiante_etnia.getText(),
                    (estudiante_capacidad_diferente.isSelected() ? "Si" : "No"),
                    (estudiante_capacidad_diferente.isSelected() ? estudiante_tipo_capacidad.getText() : ""),
                    encargado_nombre_completo.getText(),
                    encargado_relacion_con_estudiante.getText()
                });
                // Agregación de datos al objeto RegEstudiante
                RegEstudiante nuevo = new RegEstudiante();  // Inicialmente su ID == -1 (no ha sido guardado en la BD)
                nuevo.setMunicipioID(listaIDMunicipios.get(estudiante_municipio.getSelectedIndex()));
                nuevo.setEncargadoID(idEncargadoAsignado);
                nuevo.setRelacionEncargado(encargado_relacion_con_estudiante.getText());
                listaEstudiantes.add(nuevo);
                
                agregar_fila_estudiante.setEnabled(false);
                limpiar_campos_estudiante();
                setEnabled_estudiante_campos_secundarios(false);

                // En caso de que el botón 'Guardar todos los registros' esté deshabilitado
                if (!guardar_todos_los_registros.isEnabled())
                    guardar_todos_los_registros.setEnabled(true);
            }
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregar_fila_estudianteActionPerformed
    /**
     * Acción que permite cancelar la modificación de los datos del Estudiante seleccionado.
     * @param evt 
     */
    private void cancelar_edicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar_edicionActionPerformed
        limpiar_campos_estudiante();    // Limpio los datos cargados a los campos
        setEnabled_estudiante_campos_secundarios(false);    // Inhabilito los campos secundarios
        estudiante_codigo_personal.setEditable(true);  // Hago editable los campos Código Personal y CUI
        estudiante_cui.setEditable(true);
        guardar_fila_editada.setVisible(false); // Oculto los botones utilizados para la edición
        cancelar_edicion.setVisible(false);
        editar_fila_estudiante.setEnabled(true);
        eliminar_fila_estudiante.setEnabled(true);
        agregar_fila_estudiante.setVisible(true);
    }//GEN-LAST:event_cancelar_edicionActionPerformed
    /**
     * Acción que permite guardar los cambios realizados en un Estudiante seleccionado para la edición.
     * @param evt 
     */
    private void guardar_fila_editadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_fila_editadaActionPerformed
        try {
            validar_datos_estudiante(false);    // Valido si los datos son correctos
            // El Código Personal y el CUI no cambiaron, pero puede que los Nombres y Apellidos se repitan
            int contFilas = listaEstudiantes.size(), iter;
            String nombres = estudiante_nombres.getText(), apellidos = estudiante_apellidos.getText();
            // Verifico que no se repita los Nombres y Apellidos
            for(iter=0; iter<contFilas; iter++) {
                if (iter != indexEstudianteEditado &&
                        nombres.equals((String)tabla_estudiantes.getValueAt(iter, 3)) &&
                        apellidos.equals((String)tabla_estudiantes.getValueAt(iter, 4)))
                    break;  // Si se repite nombres y apellidos con un registro ya existente
            }
            if (iter != contFilas)  // Si el ciclo finaliza sin encontrar coincidencias, iter == contFilas
                JOptionPane.showMessageDialog(this, "No se puede guardar los cambios.\n\nLos nuevos datos se repiten con los del registro No. "+(iter+1)+" de la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            else {  // Se guardarán los cambios
                Calendar fecha = estudiante_fechaNacimiento.getCalendar();
                // Actualización de los datos en la Tabla de Estudiantes
                tabla_estudiantes.setValueAt(nombres, indexEstudianteEditado, 3);
                tabla_estudiantes.setValueAt(apellidos, indexEstudianteEditado, 4);
                tabla_estudiantes.setValueAt(estudiante_direccion.getText(), indexEstudianteEditado, 5);
                tabla_estudiantes.setValueAt((String)estudiante_municipio.getSelectedItem(), indexEstudianteEditado, 6);
                tabla_estudiantes.setValueAt(""+fecha.get(Calendar.DAY_OF_MONTH)+"/"+(fecha.get(Calendar.MONTH)+1)+"/"+fecha.get(Calendar.YEAR), indexEstudianteEditado, 7);
                tabla_estudiantes.setValueAt((estudiante_sexo_masculino.isSelected() ? "Masculino" : "Femenino"), indexEstudianteEditado, 8);
                tabla_estudiantes.setValueAt(estudiante_etnia.getText(), indexEstudianteEditado, 9);
                tabla_estudiantes.setValueAt((estudiante_capacidad_diferente.isSelected() ? "Si" : "No"), indexEstudianteEditado, 10);
                tabla_estudiantes.setValueAt((estudiante_capacidad_diferente.isSelected() ? estudiante_tipo_capacidad.getText() : ""), indexEstudianteEditado, 11);
                tabla_estudiantes.setValueAt(encargado_nombre_completo.getText(), indexEstudianteEditado, 12);
                tabla_estudiantes.setValueAt(encargado_relacion_con_estudiante.getText(), indexEstudianteEditado, 13);
                // Actualización de datos en el objeto RegEstudiante correspondiente
                RegEstudiante editado = listaEstudiantes.get(indexEstudianteEditado);   // El registro puede ser editado si aún no ha sido guardado (ID == -1)
                editado.setMunicipioID(listaIDMunicipios.get(estudiante_municipio.getSelectedIndex()));
                editado.setEncargadoID(idEncargadoAsignado);
                editado.setRelacionEncargado(encargado_relacion_con_estudiante.getText());
                // Hasta aquí, ya se ha modificado los datos del registro

                limpiar_campos_estudiante();    // Borro los datos de los campos
                setEnabled_estudiante_campos_secundarios(false);    // Deshabilito los campos secundarios
                estudiante_codigo_personal.setEditable(true);  // Hago editable los campos Código Personal y CUI
                estudiante_cui.setEditable(true);
                guardar_fila_editada.setVisible(false);     // Deshabilito los botones usados para la edición
                cancelar_edicion.setVisible(false);
                editar_fila_estudiante.setEnabled(true);
                eliminar_fila_estudiante.setEnabled(true);
                agregar_fila_estudiante.setVisible(true);

                JOptionPane.showMessageDialog(this, "Registro editado con éxito", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardar_fila_editadaActionPerformed
    /**
     * Eventos para controlar el ingreso de datos en Código Personal y CUI. Ambos tienen un formato específico.
     * @param evt 
     */
    private void estudiante_codigo_personalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_estudiante_codigo_personalKeyTyped
        // El formato del Código Personal es: [1 caracter][3 dígitos][3 caracteres] (sin las llaves cuadradas).
        int longActual = estudiante_codigo_personal.getText().length();
        if (longActual == 0) {
            if (!Pattern.compile("[a-zA-Z]").matcher(String.valueOf(evt.getKeyChar())).matches())
                evt.consume();
        } else if (longActual > 0 && longActual < 4) {
            if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches())
                evt.consume();
        } else if (longActual > 3 && longActual < 7) {
            if (!Pattern.compile("[a-zA-Z]").matcher(String.valueOf(evt.getKeyChar())).matches())
                evt.consume();
        } else
            evt.consume();
    }//GEN-LAST:event_estudiante_codigo_personalKeyTyped
    private void estudiante_cuiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_estudiante_cuiKeyTyped
        // Se acepta la tecla si es un dígito y si hay menos de 13 dígitos en el CUI
        if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches() || estudiante_cui.getText().length() == 13)
            evt.consume();
    }//GEN-LAST:event_estudiante_cuiKeyTyped
    /**
     * Acción que permite buscar en la Base de Datos alguna coincidencia de los campos Código Personal, CUI, Nombres o Apellidos
     * del Estudiante que se quiere agregar. Se mostrarán todos loa que coincidan con al menos uno de los campos mencionados.
     * @param evt 
     */
    private void buscar_codigoPersonal_estudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_codigoPersonal_estudianteActionPerformed
        // Verifico que los datos a buscar sean correctos
        try {
            validar_datos_estudiante(true);
            // Si los datos son correctos:
            String codigoPersonal = estudiante_codigo_personal.getText();
            // Inicialización de la tabla que contendrá los registros encontrados
            javax.swing.JTable tabla_encontrados=  new javax.swing.JTable();
            tabla_encontrados.setFont(new java.awt.Font("Tahoma", 0, 14));
            tabla_encontrados.setModel(
                    new DefaultTableModel(new Object[][]{}, new String[]{"No.", "Código Personal", "CUI", "Nombres", "Apellidos", "Dirección", "Municipio", "Fecha Nacimiento", "Sexo", "Comunidad Étnica", "Capacidad Diferente", "Tipo Capacidad"}) {
                        Class[] types = new Class [] { java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };
                        boolean[] canEdit = new boolean [] { false, false, false, false, false, false, false, false, false, false, false, false };
                        @Override
                        public Class getColumnClass(int columnIndex) { return types [columnIndex]; }
                        @Override
                        public boolean isCellEditable(int rowIndex, int columnIndex) { return canEdit [columnIndex]; }
                    }
            );
            tabla_encontrados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tabla_encontrados.setRowHeight(25);
            tabla_encontrados.getTableHeader().setResizingAllowed(false);
            tabla_encontrados.getTableHeader().setReorderingAllowed(false);
            tabla_encontrados.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla_encontrados.getColumnModel().getColumn(1).setPreferredWidth(110);
            tabla_encontrados.getColumnModel().getColumn(2).setPreferredWidth(135);
            tabla_encontrados.getColumnModel().getColumn(3).setPreferredWidth(130);
            tabla_encontrados.getColumnModel().getColumn(4).setPreferredWidth(150);
            tabla_encontrados.getColumnModel().getColumn(5).setPreferredWidth(175);
            tabla_encontrados.getColumnModel().getColumn(6).setPreferredWidth(180);
            tabla_encontrados.getColumnModel().getColumn(7).setPreferredWidth(120);
            tabla_encontrados.getColumnModel().getColumn(8).setPreferredWidth(80);
            tabla_encontrados.getColumnModel().getColumn(9).setPreferredWidth(80);
            tabla_encontrados.getColumnModel().getColumn(10).setPreferredWidth(125);
            tabla_encontrados.getColumnModel().getColumn(11).setPreferredWidth(230);
            javax.swing.JScrollPane miScroll = new javax.swing.JScrollPane();
            miScroll.setViewportView(tabla_encontrados);
            DefaultTableModel modelEncontrados = (DefaultTableModel)tabla_encontrados.getModel();

            // Realizo la consulta para obtener todos los registros que coincidan con al menos un campo
            String instruccion = "SELECT * FROM Estudiante WHERE CodigoPersonal = '"+codigoPersonal+"'";
            instruccion+= (estudiante_cui.getText().length()!=0) ? " OR CUI = '"+estudiante_cui.getText()+"'" : "";
            instruccion+= (estudiante_nombres.getText().length()!=0) ? " OR Nombres = '"+estudiante_nombres.getText()+"'" : "";
            instruccion+= (estudiante_apellidos.getText().length()!=0) ? " OR Apellidos = '"+estudiante_apellidos.getText()+"'" : "";
            try {
                Statement sentencia = this.conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                ResultSet cEstudiante = sentencia.executeQuery(instruccion);
                int contador = 0;
                while (cEstudiante.next()) {    // Obtengo todos los registros de la consulta
                    modelEncontrados.addRow(new String[] {
                        ""+(++contador),
                        cEstudiante.getString("CodigoPersonal"),
                        cEstudiante.getString("CUI"),
                        cEstudiante.getString("Nombres"),
                        cEstudiante.getString("Apellidos"),
                        cEstudiante.getString("Direccion"),
                        estudiante_municipio.getItemAt(listaIDMunicipios.indexOf(cEstudiante.getInt("Municipio_Id"))),
                        cEstudiante.getString("FechaNacimiento"),
                        ("F".equals(cEstudiante.getString("Sexo"))?"Femenino":"Masculino"),
                        cEstudiante.getString("Etnia"),
                        (cEstudiante.getBoolean("CapacidadDiferente"))?"SI":"NO",
                        (cEstudiante.getBoolean("CapacidadDiferente"))?cEstudiante.getString("TipoCapacidad"):""
                    });
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error al consultar la tabla de Estudiante\n"+e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, e);
            }

            // Ahora muestro la tabla con los registros encontrados en un cuadro de diálogo, para pedir confirmación
            if (tabla_encontrados.getRowCount() > 0) {
                String[] opciones = new String[]{"El estudiante que busco ya existe", "El estudiante que busco NO existe"};
                int opcion = JOptionPane.showOptionDialog(this, miScroll, "Registros que posiblemente coincidan", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
                // Si ya existe un registro con el mismo Código Personal, cambio la desición del usuario
                int contEncontrados = modelEncontrados.getRowCount();
                for(int i=0; i<contEncontrados; i++) {
                    if (codigoPersonal.equals((String)tabla_encontrados.getValueAt(i, 1))) {
                        opcion = JOptionPane.YES_OPTION;
                        JOptionPane.showMessageDialog(this, "El registro "+(i+1)+" de la tabla tiene el mismo Código Personal que el nuevo.\n\nNo se podrá crear el nuevo", "Datos repetidos", JOptionPane.ERROR_MESSAGE);
                        setEnabled_estudiante_campos_secundarios(false);
                        break;
                    }
                }
                if (opcion == JOptionPane.NO_OPTION) {  // Si el usuario confirma que no existe el registro, habilito los campos para completar la información
                    setEnabled_estudiante_campos_secundarios(true);
                } else {    // Si el usuario confirma que existe el registro o cierra sin confirmar, no se podrá crear un nuevo registro
                    setEnabled_estudiante_campos_secundarios(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró algún registro similar", "Resultado", JOptionPane.INFORMATION_MESSAGE);
                setEnabled_estudiante_campos_secundarios(true);
            }
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscar_codigoPersonal_estudianteActionPerformed
    /**
     * Eventos que controlan la selección de los JRadioButtom encargados de la asignación del Sexo y la Capacidad diferente
     * del Estudiante que se quiere crear.
     * @param evt 
     */
    private void estudiante_sexo_masculinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estudiante_sexo_masculinoItemStateChanged
        estudiante_sexo_femenino.setSelected(!estudiante_sexo_masculino.isSelected());
    }//GEN-LAST:event_estudiante_sexo_masculinoItemStateChanged
    private void estudiante_sexo_femeninoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estudiante_sexo_femeninoItemStateChanged
        estudiante_sexo_masculino.setSelected(!estudiante_sexo_femenino.isSelected());
    }//GEN-LAST:event_estudiante_sexo_femeninoItemStateChanged
    private void estudiante_capacidad_diferenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_estudiante_capacidad_diferenteItemStateChanged
        estudiante_tipo_capacidad.setText((estudiante_capacidad_diferente.isSelected())?"":"Sin especificar");
        estudiante_tipo_capacidad.setEnabled(estudiante_capacidad_diferente.isSelected());
    }//GEN-LAST:event_estudiante_capacidad_diferenteItemStateChanged
    /**
     * Acción que permite asignar un Encargado al Estudiante que se creará. Para ello, muestra la ventana de
     * Encargados en el que se puede buscar un registro Encargado en la Base de Datos o se crea un nuevo registro para
     * asignárselo al nuevo estudiante.
     * @param evt 
     */
    private void estudiante_asignar_encargadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estudiante_asignar_encargadoActionPerformed
        // Agrego en un ArrayList<String> el listado de municipios que se muestran, para evitar volver a hacer la consulta
        int cantiadad = estudiante_municipio.getItemCount();
        ArrayList<String> listaMunicpios = new ArrayList<>();
        for(int i=0; i<cantiadad; i++)
            listaMunicpios.add(estudiante_municipio.getItemAt(i));
        CrearEncargado crear = new CrearEncargado(this, conexion, listaIDEncargadosRecientes);
        crear.setVisible(crear.getHacerVisible());
        int idEncargado = crear.getIdEncargadoSeleccionado();
        agregar_fila_estudiante.setEnabled(idEncargado != -1);
        if (idEncargado == -1)
            JOptionPane.showMessageDialog(this, "No se seleccionó un Encargado", "Asignar Encargado", JOptionPane.ERROR_MESSAGE);
        else {
            idEncargadoAsignado = idEncargado;
            encargado_nombre_completo.setText(crear.getNombreEncargadoSeleccionado());
        }
    }//GEN-LAST:event_estudiante_asignar_encargadoActionPerformed
    /**
     * Acción que activa los botones de editar y eliminar un registro de estudiante al seleccionarlo en la tabla.
     * Un registro puede ser editado siempre que aún no ha sido guardado en la Base de Datos (tiene ID == -1). Cualquier
     * registros puede ser eliminado (esté o no guardado en la BD) ya que sólo se deja de mostrar en la tabla.
     * @param evt 
     */
    private void tabla_estudiantesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_estudiantesMousePressed
        // Un registro puede ser editado sí y sólo si aún no ha sido guardado en la Base de Datos
        boolean editable = listaEstudiantes.get(tabla_estudiantes.getSelectedRow()).getID() == -1;
        editar_fila_estudiante.setEnabled(editable);
        etiqueta_registro_no_editable.setText(editable ? "" : "El registro ya fue guardado en la Base de Datos");
        eliminar_fila_estudiante.setEnabled(true);
    }//GEN-LAST:event_tabla_estudiantesMousePressed
    /**
     * Acción que permitirá editar los datos temporales de un Estudiante, siempre que aún no ha sido guardado en la Base de
     * Datos. De un registro, se podrá editar todo excepto el Código Personal y el CUI; en caso de querer cambiar dichos
     * valores, se debe eliminar el registro y crear uno nuevo.
     * Este botón se habilitará siempre que un registro puede ser editado (así que no es necesario comprobarlo).
     * @param evt 
     */
    private void editar_fila_estudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editar_fila_estudianteActionPerformed
        int[] rango = tabla_estudiantes.getSelectedRows();
        if (rango.length == 1) {
            // Habilito los botones útiles y deshabilito otros
            editar_fila_estudiante.setEnabled(false);
            eliminar_fila_estudiante.setEnabled(false);
            guardar_fila_editada.setVisible(true);
            cancelar_edicion.setVisible(true);
            agregar_fila_estudiante.setVisible(false);
            cargar_registro_en_campos(rango[0]);  // Cargo los datos del estudiante que se editarán
            setEnabled_estudiante_campos_secundarios(true);     // Habilito los campos secundarios para la edición
            estudiante_codigo_personal.setEditable(false);  // Hago no editable los campos Código Personal y CUI
            estudiante_cui.setEditable(false);
            indexEstudianteEditado = rango[0];  // Guardo el index del registro que se va a editar
        } else
            JOptionPane.showMessageDialog(this, "Seleccione "+((rango.length==0)?"al menos":"sólo")+" un registro", "Aviso", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_editar_fila_estudianteActionPerformed
    /**
     * Acción que elimina un registro de Estudiante seleccionado (esté o no guardado en la Base de Datos).
     * @param evt 
     */
    private void eliminar_fila_estudianteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminar_fila_estudianteActionPerformed
        int[] rango = tabla_estudiantes.getSelectedRows();
        if (rango.length == 1) {
            // Pido confirmación en caso de que el registro no ha sido guardado
            int opcion = (listaEstudiantes.get(rango[0]).getID() == -1) ?
                    JOptionPane.showOptionDialog(this, "El registro no ha sido guardado.\n\nDesea eliminarlo?", "Eliminar registro", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null) :
                    JOptionPane.YES_OPTION;
            if (opcion == JOptionPane.YES_OPTION) {
                // Actualizo el No. de los registros que preceden al que se eliminará
                int cantidad = listaEstudiantes.size();
                for(int fil=rango[0]+1; fil<cantidad; fil++)
                    tabla_estudiantes.setValueAt(""+fil, fil, 0);
                // Eliminación del registro del ArrayList y de la Tabla
                listaEstudiantes.remove(rango[0]);
                ((DefaultTableModel)tabla_estudiantes.getModel()).removeRow(rango[0]);   // Elimino el registro de la Tabla de Estudiantes

                // En caso de ya no haber filas, deshabilito el botón de Guardar todo, Editar y Quitar
                if (tabla_estudiantes.getRowCount() == 0) {
                    guardar_todos_los_registros.setEnabled(false);
                    editar_fila_estudiante.setEnabled(false);
                    eliminar_fila_estudiante.setEnabled(false);
                }
            }
        } else
            JOptionPane.showMessageDialog(this, "Seleccione "+((rango.length==0)?"por lo menos":"sólo")+" un registro", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_eliminar_fila_estudianteActionPerformed
    /**
     * Acción que permite guardar todos los registros temporales, mostrados en la tabla, en la Base de Datos. Para ello, si
     * un registro está en la tabla es porque no se repite en la Base de Datos ni en la Tabla.
     * @param evt 
     */
    private void guardar_todos_los_registrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_todos_los_registrosActionPerformed
        // El método retorna false en caso de que ocurra un error de conexión con la Base de Datos, o si hay registros
        // incorrectos. Para el segundo caso, se carga el primer RegistroEstudiante incorrecto para ser editado
        int opcion = JOptionPane.showOptionDialog(this,
            "Si guarda ahora todos los registro, ya no podrá editarlos más adelante.\n\nDesea continuar?",
            "Guardar Todo", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (opcion == JOptionPane.YES_OPTION) {
            boolean resultado = guardar_todos_los_registros();
            // Si los registros se guardan correctamente, deshabilito este botón
            guardar_todos_los_registros.setEnabled(!resultado);
            // Si algún registro está seleccionado, elimino la selección y deshabilito los botones de 'Editar' y 'Quitar'
            tabla_estudiantes.removeRowSelectionInterval(0, tabla_estudiantes.getRowCount()-1);
            editar_fila_estudiante.setEnabled(false);
            eliminar_fila_estudiante.setEnabled(false);
        }
    }//GEN-LAST:event_guardar_todos_los_registrosActionPerformed
    /**
     * Evento que se lanza previo a cerrar la ventana. Para ello, intenta guardar todos los registros de Estudiante no
     * guardados (si encuentra alguno, pide confirmación de operación).
     * @param evt 
     */
    /**
     * Función que se lanza previo a cerrar la ventana en caso de haber registros que aún no han sido guardados. Para ello,
     * lanza un JOptionPane en el que se pide una acción y se toma la medida dependiendo del resultado (si hay por lo menos
     * un registro no guardado).
     * Si ocurre un error al intentar guardar un registro (el método correspondiente retorna false) se pide acción al
     * usuario de ignorarlos o corregirlos.
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Si el JButton 'guardar_todos_los_registros' está habilitado entonces hay por lo menos un registro no guardado
        int opcion = JOptionPane.YES_OPTION;    // Inicialmente se asume que no hay cambios por guardar
        if (guardar_todos_los_registros.isEnabled()) {    // Compruebo y pido acción de guardar los registros
            int contEstudiantes = listaEstudiantes.size(), cont = 0;
            for(int i=0; i<contEstudiantes; i++)
                if (listaEstudiantes.get(i).getID() == -1)
                    cont++; // Cuento los RegEstudiante's que no han sido guardados
            String[] opciones = new String[]{"Guardar Todo", "Salir sin guardar", "Cancelar"};
            opcion = JOptionPane.showOptionDialog(this,
                    "Aún hay "+(cont)+" registro"+((cont==1)?" no guardado.":"s no guardados.")
                    + "\nDesea guardarlos antes de salir?"
                    + "\n\nTome en cuenta que si elige Salir sin guardar"
                    + "\nperderá todos los registros no guardados.",
                    "Guardar registros", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if (opcion == JOptionPane.YES_OPTION) { // Eligió guardar los cambios
                boolean pasar = false;
                while (!pasar) {
                    pasar = guardar_todos_los_registros();
                    if (!pasar) {   // Si ocurre un error al intentar guardar los cambios se repetirá el ciclo
                        pasar = !(JOptionPane.showOptionDialog(this, "Ocurrió un error al intentar guardar uno de los Registros.\n\n¿Desea intentar guardarlos nuevamente?", "Guardar cambios", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null)
                                == JOptionPane.YES_OPTION);
                    }
                }
            }   // Hasta aquí ya se intentó guardar o rechazar los cambios
        }   // Hasta aquí ya se notificó al usuario de los cambios no guardados y el usuario ya eligió la opción correspondiente
        if (opcion==JOptionPane.YES_OPTION || opcion==JOptionPane.NO_OPTION) {  // Si eligió 'Guardar' o 'No guardar' se cerrará la ventana
            ventanaPadre.setEnabled(true);
            this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        } else
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing
    /**
     * Método que carga los datos de un Estudiante a los campos correspondientes, obteniendo los datos de la tabla de
     * datos temporales. Útil en la edición de un registro.
     * @param indexRegistro entero que indica el índice de la tabla de donde se obtendrán los datos
     */
    private void cargar_registro_en_campos(int indexRegistro) {
        estudiante_codigo_personal.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 1));
        estudiante_cui.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 2));
        estudiante_nombres.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 3));
        estudiante_apellidos.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 4));
        estudiante_direccion.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 5));
        estudiante_municipio.setSelectedIndex(listaIDMunicipios.indexOf(listaEstudiantes.get(indexRegistro).getMunicipioID()));
        String[] fecha = ((String)tabla_estudiantes.getValueAt(indexRegistro, 7)).split("/");
        estudiante_fechaNacimiento.setDate(new Date(Integer.parseInt(fecha[2])-1900, Integer.parseInt(fecha[1])-1, Integer.parseInt(fecha[0])));
        estudiante_sexo_masculino.setSelected("Masculino".equals((String)tabla_estudiantes.getValueAt(indexRegistro, 8)));
        estudiante_etnia.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 9));
        estudiante_capacidad_diferente.setSelected("Si".equals((String)tabla_estudiantes.getValueAt(indexRegistro, 10)));
        estudiante_tipo_capacidad.setText(estudiante_capacidad_diferente.isSelected() ? (String)tabla_estudiantes.getValueAt(indexRegistro, 11) : "");
        encargado_nombre_completo.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 12));
        encargado_relacion_con_estudiante.setText((String)tabla_estudiantes.getValueAt(indexRegistro, 13));
        idEncargadoAsignado = listaEstudiantes.get(indexRegistro).getEncargadoID();
    }
    /**
     * Función que valida que los datos del nuevo Estudiante sean correctos. Para el Código Personal y el CUI, hay eventos
     * que controlan que los formatos sean correctos; lo único por evaluar es que estén completos.
     * @param paraBuscar booleano que indica si la validación se hace a la hora de buscar coincidencias en la Base de Datos.
     * Si los datos son para buscar coincidencias, no se necesitan valores en los campos secundarios (pues estarían bloqueados).
     * @throws ExcepcionDatosIncorrectos 
     */
    private void validar_datos_estudiante(boolean paraBuscar) throws ExcepcionDatosIncorrectos {
        if (estudiante_codigo_personal.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("El Código Personal no puede ser nulo");
        if (estudiante_codigo_personal.getText().length() != 7)
            throw new ExcepcionDatosIncorrectos("El Código Personal debe tener 7 caracteres");
        if (paraBuscar)   // En búsquedas, tiene que haber por lo menos un campo no vacío
            if (estudiante_cui.getText().length()!=0 && estudiante_cui.getText().length()!=13)
                throw new ExcepcionDatosIncorrectos("Para la Búsqueda, el CUI está incompleto");
        if (!paraBuscar) {
            if (estudiante_cui.getText().length() != 13)
                throw new ExcepcionDatosIncorrectos("El Código Único de Identificación debe tener 13 dígitos");
            if (estudiante_nombres.getText().length()==0 || estudiante_apellidos.getText().length()==0)
                throw new ExcepcionDatosIncorrectos("Los nombres o los apellidos no pueden ser nulos");
            if (estudiante_direccion.getText().length() == 0)
                throw new ExcepcionDatosIncorrectos("No se ha especificado la dirección de estudiante");
            if (estudiante_municipio.getSelectedIndex() == -1)
                throw new ExcepcionDatosIncorrectos("No se ha especificado el municipio del estudiante");
            if (estudiante_fechaNacimiento.getDate() == null)
                throw new ExcepcionDatosIncorrectos("No se ha especificado la fecha de nacimiento del estudiante");
            if (estudiante_etnia.getText().length() == 0)
                throw new ExcepcionDatosIncorrectos("No se ha especificado la comunidad étnica del estudiante");
            if (estudiante_capacidad_diferente.isSelected() && estudiante_tipo_capacidad.getText().length() == 0)
                throw new ExcepcionDatosIncorrectos("No se ha especificado el tipo de capacidad diferente del estudiante");
            // Un encargado ya ha sido asignado si idEncargadoAsignado != -1
            if (idEncargadoAsignado == -1)
                throw new ExcepcionDatosIncorrectos("No se ha asignado un Encargado al Estudiante");
            if (encargado_relacion_con_estudiante.getText().length() == 0)
                throw new ExcepcionDatosIncorrectos("No se ha especificado la relación entre el Estudiante y su Encargado");
        }
    }
    /**
     * Método que habilita o inhabilita los campos en los que se ingresará la información secundaria del nuevo Estudiante.
     * La información secundaria es toda aquella información de la que no se busca coincidencias en la Base de Datos.
     * @param valorEnabled valor que se le pasará a la propiedad setEnabled() de los campos correspondientes.
     */
    private void setEnabled_estudiante_campos_secundarios(boolean valorEnabled) {
        estudiante_direccion.setEnabled(valorEnabled);
        estudiante_municipio.setEnabled(valorEnabled);
        estudiante_fechaNacimiento.setEnabled(valorEnabled);
        estudiante_sexo_masculino.setEnabled(valorEnabled);
        estudiante_sexo_femenino.setEnabled(valorEnabled);
        estudiante_etnia.setEnabled(valorEnabled);
        estudiante_capacidad_diferente.setEnabled(valorEnabled);
        estudiante_asignar_encargado.setEnabled(valorEnabled);
        encargado_nombre_completo.setEnabled(valorEnabled);
        encargado_relacion_con_estudiante.setEnabled(valorEnabled);
    }
    /**
     * Método que inserta texto vacío en los campos de entrada de datos de un nuevo estudiante.
     */
    private void limpiar_campos_estudiante() {
        estudiante_codigo_personal.setText("");
        estudiante_cui.setText("");
        estudiante_nombres.setText("");
        estudiante_apellidos.setText("");
        estudiante_direccion.setText("");
        estudiante_municipio.setSelectedIndex(-1);
        estudiante_fechaNacimiento.setDate(null);
        estudiante_etnia.setText("");
        estudiante_capacidad_diferente.setSelected(false);
        encargado_nombre_completo.setText("");
        encargado_relacion_con_estudiante.setText("");
    }
    /**
     * Función que escribe en la Base de Datos todos los Estudiantes que aún no han sido guardados. Se sabe que el i-ésimo
     * registro aún no ha sido guardado si listaEstudiantes.get(i).getID() == -1
     * Al escribir un registro en la BD se obtiene su ID (permitiendo así no eliminar el registro de la tabla y el ArrayList).
     * @return 'true' si se guardan todos los registros no guardados con éxito; 'false' si ocurre un error al intentar guardar
     * uno de los registros.
     */
    private boolean guardar_todos_los_registros() {
        boolean guardadoSinProblemas = true;
        int total = listaEstudiantes.size(), guardados = 0;
        String indexNoGuardados = "";
        for(int cont=0; cont<total; cont++) {
            RegEstudiante iterador = listaEstudiantes.get(cont);
            if (iterador.getID() == -1) {   // El registro será guardado
                String insert = "INSERT INTO Estudiante(CodigoPersonal, CUI, Nombres, Apellidos, FechaNacimiento, Direccion, Sexo, Etnia, CapacidadDiferente, TipoCapacidad, Municipio_Id, Encargado_Id, RelacionEncargado) VALUES(";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 1)+"', ";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 2)+"', ";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 3)+"', ";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 4)+"', ";
                String[] fecha = ((String)tabla_estudiantes.getValueAt(cont, 7)).split("/");
                insert+= "'"+fecha[2]+"-"+fecha[1]+"-"+fecha[0]+"', ";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 5)+"', ";
                insert+= "'"+("Masculino".equals((String)tabla_estudiantes.getValueAt(cont, 8)) ? "M" : "F")+"', ";
                insert+= "'"+(String)tabla_estudiantes.getValueAt(cont, 9)+"', ";
                insert+= "Si".equals((String)tabla_estudiantes.getValueAt(cont, 10))+", ";
                insert+= ("Si".equals((String)tabla_estudiantes.getValueAt(cont, 10)) ? "'"+(String)tabla_estudiantes.getValueAt(cont, 11)+"', " : "NULL, ");
                insert+= iterador.getMunicipioID()+", ";
                insert+= iterador.getEncargadoID()+", ";
                insert+= "'"+iterador.getRelacionEncargado()+"')";
                try {
                    conexion.prepareStatement(insert).executeUpdate();  // Inserción en la Base de Datos del registro Estudiante
                    // Obtención del ID (dentro de la Base de Datos) del registro recien insertado
                    Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
                    ResultSet cConsulta = sentencia.executeQuery("SELECT LAST_INSERT_ID()");
                    cConsulta.next();
                    iterador.setID(cConsulta.getInt(1));
                    guardados++;
                    // HASTA AQUÍ SE GARANTIZA LA CREACIÓN DEL NUEVO ESTUDIANTE.
                } catch (SQLException ex) {
                    indexNoGuardados+= ""+(cont+1)+", ";
                    guardadoSinProblemas = false;
                    Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (!guardadoSinProblemas) { // Por lo menos un registro no se guardó con éxito.
            indexNoGuardados = indexNoGuardados.substring(0, indexNoGuardados.length()-2);
            JOptionPane.showMessageDialog(this, "Los siguientes registros de la tabla no se guardaron:\n\n"+indexNoGuardados+"\n\nVerifique dichos registros.", "Error al guardar registros", JOptionPane.WARNING_MESSAGE);
        } else
            JOptionPane.showMessageDialog(this, "Se ha"+((guardados!=1)?"n":"")+" guardado "+guardados+" registro"+((guardados!=1)?"s":"")+" exitosamente.", "Registros guardados", JOptionPane.INFORMATION_MESSAGE);
        return guardadoSinProblemas;
    }
    /**
     * Función que se lanza previo a cerrar la ventana en caso de haber registros que aún no han sido guardados. Para ello,
     * lanza un JOptionPane en el que se pide una acción y se toma la medida dependiendo del resultado (si hay por lo menos
     * un registro no guardado).
     * Si ocurre un error al intentar guardar un registro (el método correspondiente retorna false) se pide acción al
     * usuario de ignorarlos o corregirlos.
     */
    private void antes_de_cerrar() {
        int opcion = JOptionPane.YES_OPTION;
        int contEstudiantes = 0, cantidad, i;
        for(i=0, cantidad=listaEstudiantes.size(); i<cantidad; i++) // Cuento los RegEstudiante's que no han sido guardados
            if (listaEstudiantes.get(i).getID() == -1)
                contEstudiantes++;
        
        if (contEstudiantes != 0) {
            String[] opciones = new String[]{"Guardar Todo", "Salir sin guardar", "Cancelar"};
            opcion = JOptionPane.showOptionDialog(this,
                    "Aún hay "+(contEstudiantes)+" registro"+((contEstudiantes==1)?" no guardado.":"s no guardados.")
                    + "\nDesea guardarlos antes de salir?"
                    + "\n\nTome en cuenta que si elige Salir sin guardar"
                    + "\nperderá todos los registros no guardados.",
                    "Guardar registros", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
            if (opcion == JOptionPane.YES_OPTION) {
                boolean guardadoSinProblemas = guardar_todos_los_registros();
                if (!guardadoSinProblemas) {
                    int opcion2 = JOptionPane.showOptionDialog(this,
                            "Uno de los registros no pudo guardarse.\n\nDesea ignoralos y continuar?\n\nSi los ignora, no podrá recuperalos",
                            "Guardar registros", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                    if (opcion2 == JOptionPane.YES_OPTION)
                        guardadoSinProblemas = true;
                }
                this.setDefaultCloseOperation(guardadoSinProblemas ? javax.swing.JDialog.DISPOSE_ON_CLOSE : javax.swing.JDialog.DO_NOTHING_ON_CLOSE);
                ventanaPadre.setEnabled(guardadoSinProblemas);  // Si se cerrará esta ventana, habilito ventanaPadre
            } else {
                ventanaPadre.setEnabled(opcion == JOptionPane.NO_OPTION);   // Si se cerrará esta ventana, habilito ventanaPadre
                this.setDefaultCloseOperation((opcion == JOptionPane.NO_OPTION) ? javax.swing.JDialog.DISPOSE_ON_CLOSE : javax.swing.JDialog.DO_NOTHING_ON_CLOSE);
            }
            // 'javax.swing.JDialog.DISPOSE_ON_CLOSE'       cierra la ventana
            // 'javax.swing.JDialog.DO_NOTHING_ON_CLOSE'    no cierra la ventana
        }
    }
    /**
     * Función que devuelve el valor de 'hacerVisible'. Al obtener datos desde la Base de Datos pueden surgir errores de
     * conexión o con la instrucción SQL por lo que puede arrojar valores erróneos o generar problemas mayores, por lo que
     * se controla y notifica en 'hacerVisible'.
     * @return 'true' si no ocurrió algún problema al intentar obtener datos desde la Base de Datos; 'false' en caso contrario.
     */
    public boolean getHacerVisible() { return hacerVisible;}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearEstudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CrearEstudiante().setVisible(true);
            }
        });
    }
    
    /**
     * Clase con atributos generales relacionados a un Estudiante. Esta clase se usa con el fin de evitar utilizar varios
     * ArrayList para llevar el control de ID's y relaciones a la hora de crear un registro de Estudiante. Los datos de
     * información del estudiante están en la tabla, reduciendo con ello los datos repetidos cargados en memoria.
     */
    private class RegEstudiante {
        private int ID, municipioID, encargadoID;
        private String relacionEncargado;
        
        private RegEstudiante() {
            ID = municipioID = encargadoID = -1;
            relacionEncargado = "";
        }

        public int getID() { return ID; }
        public int getMunicipioID() { return municipioID; }
        public int getEncargadoID() { return encargadoID; }
        public String getRelacionEncargado() { return relacionEncargado; }

        public void setID(int ID) { this.ID = ID; }
        public void setMunicipioID(int municipioID) { this.municipioID = municipioID; }
        public void setEncargadoID(int encargadoID) { this.encargadoID = encargadoID; }
        public void setRelacionEncargado(String relacionEncargado) { this.relacionEncargado = relacionEncargado; }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar_fila_estudiante;
    private javax.swing.JButton buscar_codigoPersonal_estudiante;
    private javax.swing.JButton cancelar_edicion;
    private javax.swing.JButton editar_fila_estudiante;
    private javax.swing.JButton eliminar_fila_estudiante;
    private javax.swing.JTextField encargado_nombre_completo;
    private javax.swing.JTextField encargado_relacion_con_estudiante;
    private javax.swing.JTextField estudiante_apellidos;
    private javax.swing.JButton estudiante_asignar_encargado;
    private javax.swing.JRadioButton estudiante_capacidad_diferente;
    private javax.swing.JTextField estudiante_codigo_personal;
    private javax.swing.JTextField estudiante_cui;
    private javax.swing.JTextField estudiante_direccion;
    private javax.swing.JTextField estudiante_etnia;
    private com.toedter.calendar.JDateChooser estudiante_fechaNacimiento;
    private javax.swing.JComboBox<String> estudiante_municipio;
    private javax.swing.JTextField estudiante_nombres;
    private javax.swing.JRadioButton estudiante_sexo_femenino;
    private javax.swing.JRadioButton estudiante_sexo_masculino;
    private javax.swing.JTextField estudiante_tipo_capacidad;
    private javax.swing.JLabel etiqueta_registro_no_editable;
    private javax.swing.JButton guardar_fila_editada;
    private javax.swing.JButton guardar_todos_los_registros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel_boton_guardar_todo;
    private javax.swing.JPanel panel_botones_estudiante;
    private javax.swing.JPanel panel_botones_estudiante1;
    private javax.swing.JPanel panel_datos_encargado;
    private javax.swing.JPanel panel_datos_estudiante;
    private javax.swing.JPanel panel_datos_principales_estudiante;
    private javax.swing.JPanel panel_datos_secundarios_estudiante;
    private javax.swing.JPanel panel_lista_estudiantes;
    private javax.swing.JTable tabla_estudiantes;
    // End of variables declaration//GEN-END:variables
}
