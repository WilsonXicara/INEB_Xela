/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_InicioSesion;

import Modulo_Estudiante.ExcepcionDatosIncorrectos;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 * Ventana que se lanza cuando se ejecuta por primera vez la aplicación. Antes de utilizar el Sistema de Base de Datos, las tablas de
 * la Base de Datos están vacias, en espcial las tablas Administrador y Usuarios. En esta ventana se crean los datos del Administrador
 * Principal, así como su Cuenta de Usuario; para ambos casos, los ID's de dichos registros es 1 (porque son los primeros).
 * @author Wilson Xicará.
 */
public class CrearUsuarioAdministrador extends javax.swing.JDialog {
    private Connection conexion;
    private boolean administradorPrincipalCreado, esAdminPrincipal;
    private int idNuevoAdmin;
    /**
     * Creates new form CrearAdminPrincipal
     */
    public CrearUsuarioAdministrador(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    /**
     * Inicializa la ventana, para poder conectarse con la Base de Datos.
     * @param parent
     * @param modal
     * @param conexion 
     * @param esAdminPrincipal 
     */
    public CrearUsuarioAdministrador(java.awt.Frame parent, boolean modal, Connection conexion, boolean esAdminPrincipal) {
        super(parent, modal);
        initComponents();
        this.conexion = conexion;
        this.administradorPrincipalCreado = false;
        this.esAdminPrincipal = esAdminPrincipal;
        idNuevoAdmin = -1;  // Indicador de que aún no se ha buscado en la Base de Datos el ID del nuevo Administrador
        cargar_municipios();
        
        this.setLocationRelativeTo(null);   // Para centrar esta ventana sobre la pantalla
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_general = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panel_datos_personales = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        admin_dpi = new javax.swing.JTextField();
        admin_nombres = new javax.swing.JTextField();
        admin_apellidos = new javax.swing.JTextField();
        admin_direccion = new javax.swing.JTextField();
        admin_telefono = new javax.swing.JTextField();
        admin_municipio = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        admin_celular = new javax.swing.JTextField();
        admin_sexo_masculino = new javax.swing.JRadioButton();
        admin_sexo_femenino = new javax.swing.JRadioButton();
        panel_cuenta_usuario = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        usuario_nombre = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        usuario_contraseña = new javax.swing.JPasswordField();
        usuario_confirmar_contraseña = new javax.swing.JPasswordField();
        etiqueta_resultado_confirmacion = new javax.swing.JLabel();
        etiqueta_resultado_contraseña = new javax.swing.JLabel();
        etiqueta_resultado_usuario = new javax.swing.JLabel();
        crear_registros = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Creación de cuentas para Administradores");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingrese los siguientes datos:");

        panel_datos_personales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos personales", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Nombres:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Apellidos:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("DPI:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Dirección:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Municipio:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Sexo:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Teléfono:");

        admin_dpi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        admin_dpi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                admin_dpiKeyTyped(evt);
            }
        });

        admin_nombres.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        admin_apellidos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        admin_direccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        admin_telefono.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        admin_telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                admin_telefonoKeyTyped(evt);
            }
        });

        admin_municipio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Celular:");

        admin_celular.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        admin_celular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                admin_celularKeyTyped(evt);
            }
        });

        admin_sexo_masculino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        admin_sexo_masculino.setSelected(true);
        admin_sexo_masculino.setText("Masculino");
        admin_sexo_masculino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                admin_sexo_masculinoItemStateChanged(evt);
            }
        });

        admin_sexo_femenino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        admin_sexo_femenino.setText("Femenino");
        admin_sexo_femenino.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                admin_sexo_femeninoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panel_datos_personalesLayout = new javax.swing.GroupLayout(panel_datos_personales);
        panel_datos_personales.setLayout(panel_datos_personalesLayout);
        panel_datos_personalesLayout.setHorizontalGroup(
            panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_personalesLayout.createSequentialGroup()
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(admin_dpi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_nombres, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(admin_celular, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_datos_personalesLayout.createSequentialGroup()
                        .addComponent(admin_sexo_masculino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(admin_sexo_femenino)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel_datos_personalesLayout.setVerticalGroup(
            panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_datos_personalesLayout.createSequentialGroup()
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(admin_dpi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admin_nombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admin_apellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admin_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(admin_municipio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(admin_sexo_masculino)
                        .addComponent(admin_sexo_femenino))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(admin_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_datos_personalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(admin_celular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panel_cuenta_usuario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cuenta de Usuario", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Usuario:");

        usuario_nombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        usuario_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuario_nombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usuario_nombreKeyTyped(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Contraseña:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Confirmar contraseña:");

        usuario_contraseña.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        usuario_contraseña.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuario_contraseñaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usuario_contraseñaKeyTyped(evt);
            }
        });

        usuario_confirmar_contraseña.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        usuario_confirmar_contraseña.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usuario_confirmar_contraseñaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usuario_confirmar_contraseñaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panel_cuenta_usuarioLayout = new javax.swing.GroupLayout(panel_cuenta_usuario);
        panel_cuenta_usuario.setLayout(panel_cuenta_usuarioLayout);
        panel_cuenta_usuarioLayout.setHorizontalGroup(
            panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                        .addComponent(usuario_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etiqueta_resultado_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                        .addComponent(usuario_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etiqueta_resultado_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                        .addComponent(usuario_confirmar_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etiqueta_resultado_confirmacion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panel_cuenta_usuarioLayout.setVerticalGroup(
            panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_cuenta_usuarioLayout.createSequentialGroup()
                        .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(usuario_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(etiqueta_resultado_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(usuario_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(etiqueta_resultado_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_cuenta_usuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(usuario_confirmar_contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(etiqueta_resultado_confirmacion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        crear_registros.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        crear_registros.setText("Crear Usuario");
        crear_registros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crear_registrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_generalLayout = new javax.swing.GroupLayout(panel_general);
        panel_general.setLayout(panel_generalLayout);
        panel_generalLayout.setHorizontalGroup(
            panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_generalLayout.createSequentialGroup()
                .addGroup(panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_generalLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(crear_registros)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel_generalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_cuenta_usuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panel_datos_personales, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panel_generalLayout.setVerticalGroup(
            panel_generalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_generalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_datos_personales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_cuenta_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(crear_registros)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_general, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel_general, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Eventos que controlan el cambio de los JRadioButton donde se selecciona el sexo del administrador
     */
    private void admin_sexo_masculinoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_admin_sexo_masculinoItemStateChanged
        admin_sexo_femenino.setSelected(!admin_sexo_masculino.isSelected());
    }//GEN-LAST:event_admin_sexo_masculinoItemStateChanged
    private void admin_sexo_femeninoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_admin_sexo_femeninoItemStateChanged
        admin_sexo_masculino.setSelected(!admin_sexo_femenino.isSelected());
    }//GEN-LAST:event_admin_sexo_femeninoItemStateChanged
    /**
     * Eventos que contrlolan que los campos de DPI, Teléfono y Celular sean de 13 digitos (para el DPI) o de 8 dígitos (para
     * Teléfono y Celular), sin caracters ni espacios.
     */
    private void admin_dpiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admin_dpiKeyTyped
        // Se acepta la tecla si es un dígito y si hay menos de 13 dígitos en el DPI
        if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches() || admin_dpi.getText().length() == 13)
            evt.consume();
    }//GEN-LAST:event_admin_dpiKeyTyped
    private void admin_telefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admin_telefonoKeyTyped
        // Se acepta la tecla si es un dígito y si hay menos de 8 dígitos en el número de teléfono
        if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches() || admin_telefono.getText().length() == 8)
            evt.consume();
    }//GEN-LAST:event_admin_telefonoKeyTyped
    private void admin_celularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_admin_celularKeyTyped
        // Se acepta la tecla si es un dígito y si hay menos de 8 dígitos en el número de celular
        if (!Pattern.compile("\\d").matcher(String.valueOf(evt.getKeyChar())).matches() || admin_celular.getText().length() == 8)
            evt.consume();
    }//GEN-LAST:event_admin_celularKeyTyped
    /**
     * Eventos que controlan el ingreso de la Contraseña y su Confirmación.
     */
    private void usuario_confirmar_contraseñaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_confirmar_contraseñaKeyReleased
        // Este evento se lanza cuando ya se agregó la tecla pulsada al JPasswordField
        int longContraseña = usuario_contraseña.getPassword().length, longConfirmacion = usuario_confirmar_contraseña.getPassword().length;
        if (longConfirmacion < longContraseña)
            etiqueta_resultado_confirmacion.setIcon(null);
        else if (longConfirmacion == longContraseña && longContraseña != 0) {
            etiqueta_resultado_confirmacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/"+
                    (comparar_contraseñas() ? "ok.png" : "eliminar.png"))));
        } else
            etiqueta_resultado_confirmacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png")));
    }//GEN-LAST:event_usuario_confirmar_contraseñaKeyReleased
    private void usuario_contraseñaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_contraseñaKeyReleased
        etiqueta_resultado_contraseña.setIcon((usuario_contraseña.getPassword().length==0) ?
                new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png")) : null);
        int longContraseña = usuario_contraseña.getPassword().length, longConfirmacion = usuario_confirmar_contraseña.getPassword().length;
        if (longConfirmacion < longContraseña)
            etiqueta_resultado_confirmacion.setIcon(null);
        else if (longConfirmacion == longContraseña && longContraseña != 0) {
            etiqueta_resultado_confirmacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/"+
                    (comparar_contraseñas() ? "ok.png" : "eliminar.png"))));
        } else
            etiqueta_resultado_confirmacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png")));
    }//GEN-LAST:event_usuario_contraseñaKeyReleased
    /**
     * Eventos que controlan que la Contraseña y su Confirmación tengan como máximo 10 caracteres, y que el Nombre de Usuario
     * tenga como máximo 15 caracteres.
     */
    private void usuario_contraseñaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_contraseñaKeyTyped
        if (usuario_contraseña.getPassword().length == 10)
            evt.consume();
    }//GEN-LAST:event_usuario_contraseñaKeyTyped
    private void usuario_confirmar_contraseñaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_confirmar_contraseñaKeyTyped
        if (usuario_confirmar_contraseña.getPassword().length == 10)
            evt.consume();
    }//GEN-LAST:event_usuario_confirmar_contraseñaKeyTyped
    private void usuario_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_nombreKeyTyped
        if (usuario_nombre.getText().length() == 15)
            evt.consume();
    }//GEN-LAST:event_usuario_nombreKeyTyped

    private void crear_registrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crear_registrosActionPerformed
        try {
            validar_datos_administrador();  // Si todos los datos son correctos, se procede a crear los registros en la Base de Datos
            int opcion = JOptionPane.showOptionDialog(this,
                    "Está seguro que desea crear el nuevo registro?\nEsta cuenta tendrá acceso"+(esAdminPrincipal?" total":"s privilegiados")+" al sistema.\n\nDesea continuar?",
                    "Seleccione una opción", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (opcion == JOptionPane.YES_OPTION) {
                // Creación del registro en la Tabla Administrador
                String instruccion = "INSERT INTO Administrador(Nombres, Apellidos, Direccion, DPI, Sexo, Municipio_Id) VALUES(";
                instruccion+= "'"+admin_nombres.getText()+"', ";
                instruccion+= "'"+admin_apellidos.getText()+"', ";
                instruccion+= "'"+admin_direccion.getText()+"', ";
                instruccion+= "'"+admin_dpi.getText()+"', ";
                instruccion+= "'"+(admin_sexo_masculino.isSelected() ? "M" : "F")+"', ";
                instruccion+= ""+(admin_municipio.getSelectedIndex()+1)+")";
                conexion.prepareStatement(instruccion).executeUpdate();  // Creación del Registro en la Base de Datos
                // Creación del registro en la Tabla Usuarios
                // La ventaja es que en validar_datos_administrador() ya se evaluó si el Usuario ya existe, por lo que esta
                // función retornará 1 (el registro fue creado). No es necesario evaluar el valor de retorno.
                instruccion = "SELECT nuevoUsuario('"+usuario_nombre.getText()+"', '"+String.valueOf(usuario_contraseña.getPassword())+"', "+(esAdminPrincipal?"1":"2")+", 0, "+idNuevoAdmin+")";
                conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY).executeQuery(instruccion);
                // Creación de los registros de los Números Telefónicos
                if (admin_telefono.getText().length() != 0)
                    conexion.prepareStatement("INSERT INTO Telefono(Telefono, Administrador_Id) VALUES('"+admin_telefono.getText()+"', 1)").executeUpdate();
                if (admin_celular.getText().length() != 0)
                    conexion.prepareStatement("INSERT INTO Telefono(Telefono, Administrador_Id) VALUES('"+admin_celular.getText()+"', 1)").executeUpdate();

                administradorPrincipalCreado = true;
                JOptionPane.showMessageDialog(this, "Usuario creado.\n\nBienvenid"+(admin_sexo_masculino.isSelected()?"o":"a")+" "+admin_nombres.getText().split(" ")[0], "Información", JOptionPane.INFORMATION_MESSAGE);
                this.dispose(); // Cierro la ventana
            }
        } catch (ExcepcionDatosIncorrectos ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error en datos", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(CrearUsuarioAdministrador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "No se puede crear el registro en la Base de Datos.\n"+ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//            Logger.getLogger(CrearUsuarioAdministrador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_crear_registrosActionPerformed

    private void usuario_nombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuario_nombreKeyReleased
        etiqueta_resultado_usuario.setIcon((usuario_nombre.getText().length()==0) ?
                new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar.png")) : null);
    }//GEN-LAST:event_usuario_nombreKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int opcion = JOptionPane.showOptionDialog(this,
            "Aún no ha creado la cuenta del Administrador"+(esAdminPrincipal?" Principal.\nTome en cuenta que si no crea dicha cuenta, no podrá hacer uso del sistema.":"")
            + "\n\nEstá seguro que desea salir?",
            "Aviso", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        this.setDefaultCloseOperation((opcion == JOptionPane.YES_OPTION) ? javax.swing.JDialog.DISPOSE_ON_CLOSE : javax.swing.JDialog.DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_formWindowClosing
    
    private void validar_datos_administrador() throws ExcepcionDatosIncorrectos {
        // Verifico que el DPI tenga exactamente 13 caracteres y que no exista un registro en la BD con el mismo DPI
        if (admin_dpi.getText().length() != 13)
            throw new ExcepcionDatosIncorrectos("El DPI debe tener 13 dígitos.");
        if (admin_nombres.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No se ha especificado los Nombres");
        if (admin_apellidos.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No se ha especificado los Apellidos");
        if (admin_direccion.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("No se ha especificado la Dirección");
        // Verifico que el Teléfono tengan exactamente 8 caracteres (en caso de no estar vacío)
        if (admin_telefono.getText().length() != 0 && admin_telefono.getText().length() != 8)
            throw new ExcepcionDatosIncorrectos("El número de Teléfono debe tener 8 dígitos");
        if (admin_celular.getText().length() != 0 && admin_celular.getText().length() != 8)
            throw new ExcepcionDatosIncorrectos("El número de Celular debe tener 8 dígitos");
        // Verificación de los datos de la Cuenta de Usuario
        if (usuario_nombre.getText().length() == 0)
            throw new ExcepcionDatosIncorrectos("El Nombre de usuario no puede ser nulo");
        // Verifico que no exista una cuenta de usuario con el mismo nombre de usuario
        try {
            Statement sentencia = conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            if (idNuevoAdmin == -1) {
                ResultSet cContAdmins = sentencia.executeQuery("SELECT COUNT(Id), MAX(Id) FROM Administrador");
                cContAdmins.next();
                // el ID del nuevo administrador será 1 (si no hay ningún registro) o el máximo+1 de los que existen
                idNuevoAdmin = (cContAdmins.getInt(1) == 0) ? 1 : cContAdmins.getInt(2) + 1;
            }
            ResultSet cAdmin = sentencia.executeQuery("SELECT COUNT(Id) FROM Administrador WHERE Dpi = '"+admin_dpi.getText()+"'");
            cAdmin.next();
            if (cAdmin.getInt(1) != 0)
                throw new ExcepcionDatosIncorrectos("Ya existe un Administrador con el mismo DPI");
            ResultSet cUsuario = sentencia.executeQuery("SELECT existeUsuario('"+usuario_nombre.getText()+"')");
            cUsuario.next();    // La función devuelve la cantidad de registros que coinciden (0 si el usuario aún no existe)
            if (cUsuario.getInt(1) != 0)
                throw new ExcepcionDatosIncorrectos("Ya existe una Cuenta de Usuario con el mismo nombre");
        } catch (SQLException ex) {
//            Logger.getLogger(CrearUsuarioAdministrador.class.getName()).log(Level.SEVERE, null, ex);
            throw new ExcepcionDatosIncorrectos("Error de conexión con la Base de Datos.\nConsulte al programador");
        }   
        if (usuario_contraseña.getPassword().length == 0)
            throw new ExcepcionDatosIncorrectos("La Contraseña no puede ser nula");
        if (!comparar_contraseñas())
            throw new ExcepcionDatosIncorrectos("La Contraseña y su Confirmación son diferentes");
    }
    /**
     * Función que compara si la contraseña y su confirmación son iguales. Se asume que esta función es llamada siempre que la
     * contraseña y su confirmación tengan los mismos caracteres
     * @return 'true' si la contraseña y su confirmación son iguales; 'false' en caso contrario.
     */
    private boolean comparar_contraseñas() {
        char[] contraseña = usuario_contraseña.getPassword(), confirmacion = usuario_confirmar_contraseña.getPassword();
        if (contraseña.length != confirmacion.length)
            return false;
        int cont = contraseña.length;
        for(int i=0; i<cont; i++) {
            if (contraseña[i] != confirmacion[i]) {
                return false;
            }
        }
        return true;
    }
    /**APROBADO!!!
     * Método que obtiene el listado de los Municipios almacenados en la Base de Datos para insertarlos en el JComboBox
     * que corresponde. Sólo se obtiene los nombres más no los Id's ya que son correlativos entre ambos.
     */
    private void cargar_municipios() {
        admin_municipio.removeAllItems();
        try {
            Statement sentencia = this.conexion.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
            ResultSet cMunicipios = sentencia.executeQuery("SELECT Nombre FROM Municipio");
            while (cMunicipios.next())
                admin_municipio.addItem(cMunicipios.getString("Nombre"));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al intentar obtener los Municipios\n"+ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            this.dispose(); // Si ocurre un error en este punto, cierro la ventana
//            Logger.getLogger(CrearEstudiante.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public boolean isAdministradorPrincipalCreado() { return administradorPrincipalCreado; }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearUsuarioAdministrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CrearUsuarioAdministrador dialog = new CrearUsuarioAdministrador(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField admin_apellidos;
    private javax.swing.JTextField admin_celular;
    private javax.swing.JTextField admin_direccion;
    private javax.swing.JTextField admin_dpi;
    private javax.swing.JComboBox<String> admin_municipio;
    private javax.swing.JTextField admin_nombres;
    private javax.swing.JRadioButton admin_sexo_femenino;
    private javax.swing.JRadioButton admin_sexo_masculino;
    private javax.swing.JTextField admin_telefono;
    private javax.swing.JButton crear_registros;
    private javax.swing.JLabel etiqueta_resultado_confirmacion;
    private javax.swing.JLabel etiqueta_resultado_contraseña;
    private javax.swing.JLabel etiqueta_resultado_usuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel panel_cuenta_usuario;
    private javax.swing.JPanel panel_datos_personales;
    private javax.swing.JPanel panel_general;
    private javax.swing.JPasswordField usuario_confirmar_contraseña;
    private javax.swing.JPasswordField usuario_contraseña;
    private javax.swing.JTextField usuario_nombre;
    // End of variables declaration//GEN-END:variables
}
