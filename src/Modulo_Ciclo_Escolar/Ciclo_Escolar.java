/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Modulo_Ciclo_Escolar;

import Tipos_tablas.No_editable;
import Modulo_Ciclo_Escolar.Crear_Grado;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author USUARIO
 */
public class Ciclo_Escolar extends javax.swing.JDialog {

    Connection base;
    ArrayList<String>  ID ,Id_grado;
    String año;
    int posicion;
    /**
     * Creates new form Ciclo_Escolar
     */
    public Ciclo_Escolar(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    public Ciclo_Escolar(java.awt.Frame parent, boolean modal,Connection base) throws SQLException {
        super(parent, modal);
        initComponents();
         this.base = base;
         posicion =0;
        Calendar fecha = new GregorianCalendar();
        año = Integer.toString(fecha.get(Calendar.YEAR));
        Cargar_Datos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jScrollPane3 = new javax.swing.JScrollPane();
        Grados = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ciclo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Cursos = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Cursos_asignados = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        Menu_crear = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Grados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Grados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GradosMouseClicked(evt);
            }
        });
        Grados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                GradosKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(Grados);

        jLabel1.setText("Ciclo Escolar");

        ciclo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cicloItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Grados");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Cursos");

        Cursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        Cursos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CursosKeyTyped(evt);
            }
        });
        jScrollPane4.setViewportView(Cursos);

        jLabel4.setText("Cursos Asignados");

        jScrollPane1.setViewportView(Cursos_asignados);

        Menu_crear.setText("Crear");

        jMenuItem1.setText("Ciclo Escolar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Menu_crear.add(jMenuItem1);

        jMenuItem2.setText("Grado");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Menu_crear.add(jMenuItem2);

        jMenuItem3.setText("Curso");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Menu_crear.add(jMenuItem3);

        jMenuBar2.add(Menu_crear);

        jMenu2.setText("Asignaciones");

        jMenuItem8.setText("Asignaciones a Grado");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabel3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(124, 124, 124)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(98, 98, 98)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(11, 11, 11)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GradosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GradosKeyPressed
        evt.consume();
    }//GEN-LAST:event_GradosKeyPressed

    private void cicloItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cicloItemStateChanged
        if(ciclo.getSelectedIndex()!=-1){
        posicion = ciclo.getSelectedIndex();
        String Id = ID.get(posicion);
        Statement a;
        try {
            a = base.createStatement();
            ResultSet consulta_Grados = a.executeQuery("SELECT grado.Nombre,grado.Seccion, grado.Id FROM AsignacionCAT INNER JOIN grado ON AsignacionCAT.Grado_Id = grado.Id WHERE AsignacionCAT.CicloEscolar_Id="+Id+" AND AsignacionCAT.Curso_Id is null ANd AsignacionCAT.Catedratico_Id is null;");
            a = base.createStatement();
            ResultSet consulta_Curso = a.executeQuery("SELECT curso.Nombre FROM asignacioncat INNER JOIN curso ON asignacioncat.Curso_Id = curso.Id INNER JOIN cicloescolar ON asignacioncat.CicloEscolar_Id = cicloescolar.Id WHERE asignacioncat.CicloEscolar_Id = "+Id+" AND asignacioncat.Grado_Id is null AND asignacioncat.Catedratico_Id is null;");
            if(consulta_Grados.next()){
                Tabla_Grados(consulta_Grados);
            }
            else{
                No_editable tabla = new No_editable();
                tabla.addColumn("Nombre");
                tabla.addColumn("Sección");
                Grados.setModel(tabla);
            }
            if(consulta_Curso.next()){
                Tabla_cursos(consulta_Curso);
            }
            else{
                No_editable tabla = new No_editable();
                String[] fila = new String[3];
                String catedratico, grado;
                tabla.addColumn("Nombre");
                tabla.addColumn("Catedratico Asignado");
                tabla.addColumn("Grado Asignado");
                Cursos.setModel(tabla);
            }

        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_cicloItemStateChanged

    private void CursosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CursosKeyTyped
        evt.consume();
    }//GEN-LAST:event_CursosKeyTyped

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            this.dispose();
            Crear_Grado a = new Crear_Grado(new Frame(),true,base,ID.get(posicion));
            a.setVisible(true);
            this.pack();
            Statement   b = base.createStatement();
            ResultSet consulta_Grados = b.executeQuery("SELECT grado.Nombre,grado.Seccion FROM asignacioncat INNER JOIN grado ON AsignacionCAT.Grado_Id = grado.Id WHERE AsignacionCAT.CicloEscolar_Id="+ID.get(posicion)+" AND AsignacionCAT.Curso_Id is null AND AsignacionCAT.Catedratico_Id is null ;");
            if(consulta_Grados.next()){
                Tabla_Grados(consulta_Grados);
            }
            else{
                No_editable tabla = new No_editable();
                tabla.addColumn("Nombre");
                tabla.addColumn("Sección");
                Grados.setModel(tabla);
            }
            this.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
       
        try {
            this.setVisible(false);
            Crear_Curso a = new Crear_Curso(new Frame(),true,base,ID.get(posicion));
            a.setVisible(true);
             Statement b = base.createStatement();
            ResultSet consulta_Curso = b.executeQuery("SELECT curso.Nombre FROM asignacioncat INNER JOIN curso ON asignacioncat.Curso_Id = curso.Id INNER JOIN cicloescolar ON asignacioncat.CicloEscolar_Id = cicloescolar.Id WHERE asignacioncat.CicloEscolar_Id = "+ID.get(posicion)+" AND asignacioncat.Grado_Id is null AND asignacioncat.Catedratico_Id is null;");
            if(consulta_Curso.next()){
                Tabla_cursos(consulta_Curso);
            }
            else{
                No_editable tabla = new No_editable();
                
                String grado;
                tabla.addColumn("Nombre");
                Cursos.setModel(tabla);
            }
            this.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        try {
            this.dispose();
            new Asignar_curso_a_grado(new Frame(),true,base,ID.get(posicion)).setVisible(true);
            this.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            this.dispose();
            new Crear_Ciclo_Escolar_1(new Frame(),true, base).setVisible(true);
            this.setVisible(true);
            Cargar_Datos();
            this.pack();
            
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void GradosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GradosMouseClicked
        try {
            int grado = Grados.getSelectedRow();
            System.out.println(grado);
            Tabla_cursos_asignados(Id_grado.get(grado));
        } catch (SQLException ex) {
            Logger.getLogger(Ciclo_Escolar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GradosMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ciclo_Escolar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Ciclo_Escolar dialog = new Ciclo_Escolar(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
       public void Cargar_Datos() throws SQLException{
           ciclo.removeAllItems();
        boolean encontrado = false;
        ID = new ArrayList<String>();
        Statement a = base.createStatement();
        ResultSet consulta = a.executeQuery("SELECT anio,Id FROM CicloEscolar ORDER BY anio");
        while(consulta.next()){
            String nuevo = consulta.getString(1);
            ID.add(consulta.getString(2));
            if(nuevo.equals(año)) encontrado = true;
            ciclo.addItem(nuevo);
        }
        if(encontrado == true){
            ciclo.setSelectedItem(año);
        }
    }
    public void Tabla_Grados(ResultSet consulta) throws SQLException{
        No_editable tabla = new No_editable();
        Id_grado= new ArrayList<String>();
        tabla.addColumn("Nombre");
        tabla.addColumn("Sección");
        String[] fila = new String[2];
        fila[0] = consulta.getString(1);
        fila[1] = consulta.getString(2);
        Id_grado.add(consulta.getString(3));
        tabla.addRow(fila);
        while(consulta.next()){
            fila[0] = consulta.getString(1);
            fila[1] = consulta.getString(2);
            tabla.addRow(fila);
            Id_grado.add(consulta.getString(3));
        }
        tabla.isCellEditable(0, 0);
        Grados.setModel(tabla);
    }
    
    public void Tabla_cursos(ResultSet consulta) throws SQLException{
        No_editable tabla = new No_editable();
        String[] fila = new String[1];
        String catedratico, grado;
        tabla.addColumn("Nombre");
        fila[0] = consulta.getString(1);
        tabla.addRow(fila);
        while (consulta.next()){
            fila[0] = consulta.getString(1);
        tabla.addRow(fila);
        }
    
       Cursos.setModel(tabla);
    }
    
    public void Tabla_cursos_asignados(String Id) throws SQLException{
        Statement a = base.createStatement();
        ResultSet consulta_Curso_asignado = a.executeQuery("SELECT curso.Nombre, catedratico.Nombres,catedratico.Apellidos FROM asignacioncat INNER JOIN curso ON asignacioncat.Curso_Id = curso.Id INNER JOIN cicloescolar ON asignacioncat.CicloEscolar_Id = cicloescolar.Id INNER JOIN catedratico ON asignacioncat.Catedratico_Id = catedratico.Id WHERE asignacioncat.CicloEscolar_Id = "+ID.get(posicion)+" AND asignacioncat.Grado_Id = "+Id+";");
        No_editable tabla = new No_editable();
        tabla.addColumn("Nombre");
        tabla.addColumn("Catedratico Asignado");
        
        //Se ingresa las demas filas
        while (consulta_Curso_asignado.next()){
            String[] fila = new String[2];
            fila[0] = consulta_Curso_asignado.getString(1);
            //Se verifica si el curso ya tiene un catedratico asignado
            fila[1] = consulta_Curso_asignado.getString(2) +" "+consulta_Curso_asignado.getString(3);
        
            tabla.addRow(fila);
        }
    
       Cursos_asignados.setModel(tabla);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Cursos;
    private javax.swing.JTable Cursos_asignados;
    private javax.swing.JTable Grados;
    private javax.swing.JMenu Menu_crear;
    private javax.swing.JComboBox<String> ciclo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
